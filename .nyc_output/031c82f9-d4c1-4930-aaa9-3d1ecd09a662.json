{"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\blog.spec.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\blog.spec.ts","statementMap":{"0":{"start":{"line":11,"column":16},"end":{"line":19,"column":1}},"1":{"start":{"line":12,"column":28},"end":{"line":12,"column":110}},"2":{"start":{"line":12,"column":91},"end":{"line":12,"column":106}},"3":{"start":{"line":13,"column":4},"end":{"line":18,"column":7}},"4":{"start":{"line":14,"column":36},"end":{"line":14,"column":97}},"5":{"start":{"line":14,"column":42},"end":{"line":14,"column":70}},"6":{"start":{"line":14,"column":85},"end":{"line":14,"column":95}},"7":{"start":{"line":15,"column":35},"end":{"line":15,"column":100}},"8":{"start":{"line":15,"column":41},"end":{"line":15,"column":73}},"9":{"start":{"line":15,"column":88},"end":{"line":15,"column":98}},"10":{"start":{"line":16,"column":32},"end":{"line":16,"column":116}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":78}},"12":{"start":{"line":20,"column":22},"end":{"line":22,"column":1}},"13":{"start":{"line":21,"column":4},"end":{"line":21,"column":62}},"14":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"15":{"start":{"line":206,"column":20},"end":{"line":206,"column":57}},"16":{"start":{"line":207,"column":19},"end":{"line":207,"column":57}},"17":{"start":{"line":208,"column":16},"end":{"line":208,"column":32}},"18":{"start":{"line":211,"column":14},"end":{"line":211,"column":19}},"19":{"start":{"line":212,"column":0},"end":{"line":229,"column":4}},"20":{"start":{"line":212,"column":30},"end":{"line":229,"column":2}},"21":{"start":{"line":214,"column":31},"end":{"line":219,"column":6}},"22":{"start":{"line":220,"column":4},"end":{"line":220,"column":55}},"23":{"start":{"line":222,"column":30},"end":{"line":227,"column":6}},"24":{"start":{"line":228,"column":4},"end":{"line":228,"column":53}},"25":{"start":{"line":230,"column":0},"end":{"line":244,"column":3}},"26":{"start":{"line":231,"column":4},"end":{"line":243,"column":25}},"27":{"start":{"line":231,"column":92},"end":{"line":243,"column":6}},"28":{"start":{"line":232,"column":25},"end":{"line":237,"column":9}},"29":{"start":{"line":238,"column":8},"end":{"line":242,"column":25}},"30":{"start":{"line":245,"column":0},"end":{"line":259,"column":3}},"31":{"start":{"line":246,"column":4},"end":{"line":258,"column":25}},"32":{"start":{"line":246,"column":97},"end":{"line":258,"column":6}},"33":{"start":{"line":247,"column":25},"end":{"line":252,"column":9}},"34":{"start":{"line":253,"column":8},"end":{"line":257,"column":25}},"35":{"start":{"line":260,"column":0},"end":{"line":267,"column":3}},"36":{"start":{"line":261,"column":4},"end":{"line":266,"column":25}},"37":{"start":{"line":261,"column":54},"end":{"line":266,"column":6}},"38":{"start":{"line":262,"column":8},"end":{"line":265,"column":25}},"39":{"start":{"line":268,"column":0},"end":{"line":306,"column":3}},"40":{"start":{"line":270,"column":4},"end":{"line":281,"column":8}},"41":{"start":{"line":270,"column":34},"end":{"line":281,"column":6}},"42":{"start":{"line":271,"column":25},"end":{"line":279,"column":10}},"43":{"start":{"line":280,"column":8},"end":{"line":280,"column":35}},"44":{"start":{"line":282,"column":4},"end":{"line":287,"column":8}},"45":{"start":{"line":282,"column":60},"end":{"line":287,"column":6}},"46":{"start":{"line":283,"column":8},"end":{"line":286,"column":25}},"47":{"start":{"line":288,"column":4},"end":{"line":293,"column":8}},"48":{"start":{"line":288,"column":98},"end":{"line":293,"column":6}},"49":{"start":{"line":289,"column":8},"end":{"line":292,"column":25}},"50":{"start":{"line":294,"column":4},"end":{"line":299,"column":8}},"51":{"start":{"line":294,"column":73},"end":{"line":299,"column":6}},"52":{"start":{"line":295,"column":8},"end":{"line":298,"column":25}},"53":{"start":{"line":300,"column":4},"end":{"line":305,"column":8}},"54":{"start":{"line":300,"column":57},"end":{"line":305,"column":6}},"55":{"start":{"line":301,"column":8},"end":{"line":304,"column":25}},"56":{"start":{"line":307,"column":0},"end":{"line":339,"column":3}},"57":{"start":{"line":309,"column":4},"end":{"line":320,"column":8}},"58":{"start":{"line":309,"column":34},"end":{"line":320,"column":6}},"59":{"start":{"line":310,"column":25},"end":{"line":318,"column":10}},"60":{"start":{"line":319,"column":8},"end":{"line":319,"column":35}},"61":{"start":{"line":321,"column":4},"end":{"line":326,"column":8}},"62":{"start":{"line":321,"column":90},"end":{"line":326,"column":6}},"63":{"start":{"line":322,"column":8},"end":{"line":325,"column":25}},"64":{"start":{"line":327,"column":4},"end":{"line":332,"column":8}},"65":{"start":{"line":327,"column":91},"end":{"line":332,"column":6}},"66":{"start":{"line":328,"column":8},"end":{"line":331,"column":25}},"67":{"start":{"line":333,"column":4},"end":{"line":338,"column":8}},"68":{"start":{"line":333,"column":73},"end":{"line":338,"column":6}},"69":{"start":{"line":334,"column":8},"end":{"line":337,"column":25}},"70":{"start":{"line":340,"column":0},"end":{"line":372,"column":3}},"71":{"start":{"line":342,"column":4},"end":{"line":353,"column":8}},"72":{"start":{"line":342,"column":34},"end":{"line":353,"column":6}},"73":{"start":{"line":343,"column":25},"end":{"line":351,"column":10}},"74":{"start":{"line":352,"column":8},"end":{"line":352,"column":35}},"75":{"start":{"line":354,"column":4},"end":{"line":359,"column":8}},"76":{"start":{"line":354,"column":93},"end":{"line":359,"column":6}},"77":{"start":{"line":355,"column":8},"end":{"line":358,"column":25}},"78":{"start":{"line":360,"column":4},"end":{"line":365,"column":8}},"79":{"start":{"line":360,"column":98},"end":{"line":365,"column":6}},"80":{"start":{"line":361,"column":8},"end":{"line":364,"column":25}},"81":{"start":{"line":366,"column":4},"end":{"line":371,"column":8}},"82":{"start":{"line":366,"column":73},"end":{"line":371,"column":6}},"83":{"start":{"line":367,"column":8},"end":{"line":370,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":44},"end":{"line":11,"column":45}},"loc":{"start":{"line":11,"column":89},"end":{"line":19,"column":1}},"line":11},"1":{"name":"adopt","decl":{"start":{"line":12,"column":13},"end":{"line":12,"column":18}},"loc":{"start":{"line":12,"column":26},"end":{"line":12,"column":112}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":70},"end":{"line":12,"column":71}},"loc":{"start":{"line":12,"column":89},"end":{"line":12,"column":108}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":36},"end":{"line":13,"column":37}},"loc":{"start":{"line":13,"column":63},"end":{"line":18,"column":5}},"line":13},"4":{"name":"fulfilled","decl":{"start":{"line":14,"column":17},"end":{"line":14,"column":26}},"loc":{"start":{"line":14,"column":34},"end":{"line":14,"column":99}},"line":14},"5":{"name":"rejected","decl":{"start":{"line":15,"column":17},"end":{"line":15,"column":25}},"loc":{"start":{"line":15,"column":33},"end":{"line":15,"column":102}},"line":15},"6":{"name":"step","decl":{"start":{"line":16,"column":17},"end":{"line":16,"column":21}},"loc":{"start":{"line":16,"column":30},"end":{"line":16,"column":118}},"line":16},"7":{"name":"(anonymous_7)","decl":{"start":{"line":20,"column":56},"end":{"line":20,"column":57}},"loc":{"start":{"line":20,"column":71},"end":{"line":22,"column":1}},"line":20},"8":{"name":"(anonymous_8)","decl":{"start":{"line":212,"column":24},"end":{"line":212,"column":25}},"loc":{"start":{"line":212,"column":30},"end":{"line":229,"column":2}},"line":212},"9":{"name":"(anonymous_9)","decl":{"start":{"line":212,"column":64},"end":{"line":212,"column":65}},"loc":{"start":{"line":212,"column":77},"end":{"line":229,"column":1}},"line":212},"10":{"name":"(anonymous_10)","decl":{"start":{"line":230,"column":52},"end":{"line":230,"column":53}},"loc":{"start":{"line":230,"column":58},"end":{"line":244,"column":1}},"line":230},"11":{"name":"(anonymous_11)","decl":{"start":{"line":231,"column":86},"end":{"line":231,"column":87}},"loc":{"start":{"line":231,"column":92},"end":{"line":243,"column":6}},"line":231},"12":{"name":"(anonymous_12)","decl":{"start":{"line":231,"column":126},"end":{"line":231,"column":127}},"loc":{"start":{"line":231,"column":139},"end":{"line":243,"column":5}},"line":231},"13":{"name":"(anonymous_13)","decl":{"start":{"line":245,"column":53},"end":{"line":245,"column":54}},"loc":{"start":{"line":245,"column":59},"end":{"line":259,"column":1}},"line":245},"14":{"name":"(anonymous_14)","decl":{"start":{"line":246,"column":91},"end":{"line":246,"column":92}},"loc":{"start":{"line":246,"column":97},"end":{"line":258,"column":6}},"line":246},"15":{"name":"(anonymous_15)","decl":{"start":{"line":246,"column":131},"end":{"line":246,"column":132}},"loc":{"start":{"line":246,"column":144},"end":{"line":258,"column":5}},"line":246},"16":{"name":"(anonymous_16)","decl":{"start":{"line":260,"column":37},"end":{"line":260,"column":38}},"loc":{"start":{"line":260,"column":43},"end":{"line":267,"column":1}},"line":260},"17":{"name":"(anonymous_17)","decl":{"start":{"line":261,"column":48},"end":{"line":261,"column":49}},"loc":{"start":{"line":261,"column":54},"end":{"line":266,"column":6}},"line":261},"18":{"name":"(anonymous_18)","decl":{"start":{"line":261,"column":88},"end":{"line":261,"column":89}},"loc":{"start":{"line":261,"column":101},"end":{"line":266,"column":5}},"line":261},"19":{"name":"(anonymous_19)","decl":{"start":{"line":268,"column":44},"end":{"line":268,"column":45}},"loc":{"start":{"line":268,"column":50},"end":{"line":306,"column":1}},"line":268},"20":{"name":"(anonymous_20)","decl":{"start":{"line":270,"column":28},"end":{"line":270,"column":29}},"loc":{"start":{"line":270,"column":34},"end":{"line":281,"column":6}},"line":270},"21":{"name":"(anonymous_21)","decl":{"start":{"line":270,"column":68},"end":{"line":270,"column":69}},"loc":{"start":{"line":270,"column":81},"end":{"line":281,"column":5}},"line":270},"22":{"name":"(anonymous_22)","decl":{"start":{"line":282,"column":54},"end":{"line":282,"column":55}},"loc":{"start":{"line":282,"column":60},"end":{"line":287,"column":6}},"line":282},"23":{"name":"(anonymous_23)","decl":{"start":{"line":282,"column":94},"end":{"line":282,"column":95}},"loc":{"start":{"line":282,"column":107},"end":{"line":287,"column":5}},"line":282},"24":{"name":"(anonymous_24)","decl":{"start":{"line":288,"column":92},"end":{"line":288,"column":93}},"loc":{"start":{"line":288,"column":98},"end":{"line":293,"column":6}},"line":288},"25":{"name":"(anonymous_25)","decl":{"start":{"line":288,"column":132},"end":{"line":288,"column":133}},"loc":{"start":{"line":288,"column":145},"end":{"line":293,"column":5}},"line":288},"26":{"name":"(anonymous_26)","decl":{"start":{"line":294,"column":67},"end":{"line":294,"column":68}},"loc":{"start":{"line":294,"column":73},"end":{"line":299,"column":6}},"line":294},"27":{"name":"(anonymous_27)","decl":{"start":{"line":294,"column":107},"end":{"line":294,"column":108}},"loc":{"start":{"line":294,"column":120},"end":{"line":299,"column":5}},"line":294},"28":{"name":"(anonymous_28)","decl":{"start":{"line":300,"column":51},"end":{"line":300,"column":52}},"loc":{"start":{"line":300,"column":57},"end":{"line":305,"column":6}},"line":300},"29":{"name":"(anonymous_29)","decl":{"start":{"line":300,"column":91},"end":{"line":300,"column":92}},"loc":{"start":{"line":300,"column":104},"end":{"line":305,"column":5}},"line":300},"30":{"name":"(anonymous_30)","decl":{"start":{"line":307,"column":41},"end":{"line":307,"column":42}},"loc":{"start":{"line":307,"column":47},"end":{"line":339,"column":1}},"line":307},"31":{"name":"(anonymous_31)","decl":{"start":{"line":309,"column":28},"end":{"line":309,"column":29}},"loc":{"start":{"line":309,"column":34},"end":{"line":320,"column":6}},"line":309},"32":{"name":"(anonymous_32)","decl":{"start":{"line":309,"column":68},"end":{"line":309,"column":69}},"loc":{"start":{"line":309,"column":81},"end":{"line":320,"column":5}},"line":309},"33":{"name":"(anonymous_33)","decl":{"start":{"line":321,"column":84},"end":{"line":321,"column":85}},"loc":{"start":{"line":321,"column":90},"end":{"line":326,"column":6}},"line":321},"34":{"name":"(anonymous_34)","decl":{"start":{"line":321,"column":124},"end":{"line":321,"column":125}},"loc":{"start":{"line":321,"column":137},"end":{"line":326,"column":5}},"line":321},"35":{"name":"(anonymous_35)","decl":{"start":{"line":327,"column":85},"end":{"line":327,"column":86}},"loc":{"start":{"line":327,"column":91},"end":{"line":332,"column":6}},"line":327},"36":{"name":"(anonymous_36)","decl":{"start":{"line":327,"column":125},"end":{"line":327,"column":126}},"loc":{"start":{"line":327,"column":138},"end":{"line":332,"column":5}},"line":327},"37":{"name":"(anonymous_37)","decl":{"start":{"line":333,"column":67},"end":{"line":333,"column":68}},"loc":{"start":{"line":333,"column":73},"end":{"line":338,"column":6}},"line":333},"38":{"name":"(anonymous_38)","decl":{"start":{"line":333,"column":107},"end":{"line":333,"column":108}},"loc":{"start":{"line":333,"column":120},"end":{"line":338,"column":5}},"line":333},"39":{"name":"(anonymous_39)","decl":{"start":{"line":340,"column":43},"end":{"line":340,"column":44}},"loc":{"start":{"line":340,"column":49},"end":{"line":372,"column":1}},"line":340},"40":{"name":"(anonymous_40)","decl":{"start":{"line":342,"column":28},"end":{"line":342,"column":29}},"loc":{"start":{"line":342,"column":34},"end":{"line":353,"column":6}},"line":342},"41":{"name":"(anonymous_41)","decl":{"start":{"line":342,"column":68},"end":{"line":342,"column":69}},"loc":{"start":{"line":342,"column":81},"end":{"line":353,"column":5}},"line":342},"42":{"name":"(anonymous_42)","decl":{"start":{"line":354,"column":87},"end":{"line":354,"column":88}},"loc":{"start":{"line":354,"column":93},"end":{"line":359,"column":6}},"line":354},"43":{"name":"(anonymous_43)","decl":{"start":{"line":354,"column":127},"end":{"line":354,"column":128}},"loc":{"start":{"line":354,"column":140},"end":{"line":359,"column":5}},"line":354},"44":{"name":"(anonymous_44)","decl":{"start":{"line":360,"column":92},"end":{"line":360,"column":93}},"loc":{"start":{"line":360,"column":98},"end":{"line":365,"column":6}},"line":360},"45":{"name":"(anonymous_45)","decl":{"start":{"line":360,"column":132},"end":{"line":360,"column":133}},"loc":{"start":{"line":360,"column":145},"end":{"line":365,"column":5}},"line":360},"46":{"name":"(anonymous_46)","decl":{"start":{"line":366,"column":67},"end":{"line":366,"column":68}},"loc":{"start":{"line":366,"column":73},"end":{"line":371,"column":6}},"line":366},"47":{"name":"(anonymous_47)","decl":{"start":{"line":366,"column":107},"end":{"line":366,"column":108}},"loc":{"start":{"line":366,"column":120},"end":{"line":371,"column":5}},"line":366}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":16},"end":{"line":19,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":17},"end":{"line":11,"column":21}},{"start":{"line":11,"column":25},"end":{"line":11,"column":39}},{"start":{"line":11,"column":44},"end":{"line":19,"column":1}}],"line":11},"1":{"loc":{"start":{"line":12,"column":35},"end":{"line":12,"column":109}},"type":"cond-expr","locations":[{"start":{"line":12,"column":56},"end":{"line":12,"column":61}},{"start":{"line":12,"column":64},"end":{"line":12,"column":109}}],"line":12},"2":{"loc":{"start":{"line":13,"column":16},"end":{"line":13,"column":34}},"type":"binary-expr","locations":[{"start":{"line":13,"column":16},"end":{"line":13,"column":17}},{"start":{"line":13,"column":22},"end":{"line":13,"column":33}}],"line":13},"3":{"loc":{"start":{"line":16,"column":32},"end":{"line":16,"column":115}},"type":"cond-expr","locations":[{"start":{"line":16,"column":46},"end":{"line":16,"column":67}},{"start":{"line":16,"column":70},"end":{"line":16,"column":115}}],"line":16},"4":{"loc":{"start":{"line":17,"column":51},"end":{"line":17,"column":67}},"type":"binary-expr","locations":[{"start":{"line":17,"column":51},"end":{"line":17,"column":61}},{"start":{"line":17,"column":65},"end":{"line":17,"column":67}}],"line":17},"5":{"loc":{"start":{"line":20,"column":22},"end":{"line":22,"column":1}},"type":"binary-expr","locations":[{"start":{"line":20,"column":23},"end":{"line":20,"column":27}},{"start":{"line":20,"column":31},"end":{"line":20,"column":51}},{"start":{"line":20,"column":56},"end":{"line":22,"column":1}}],"line":20},"6":{"loc":{"start":{"line":21,"column":11},"end":{"line":21,"column":61}},"type":"cond-expr","locations":[{"start":{"line":21,"column":37},"end":{"line":21,"column":40}},{"start":{"line":21,"column":43},"end":{"line":21,"column":61}}],"line":21},"7":{"loc":{"start":{"line":21,"column":12},"end":{"line":21,"column":33}},"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":15}},{"start":{"line":21,"column":19},"end":{"line":21,"column":33}}],"line":21}},"s":{"0":1,"1":85,"2":85,"3":54,"4":85,"5":85,"6":0,"7":0,"8":0,"9":0,"10":139,"11":54,"12":1,"13":2,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":31,"21":31,"22":31,"23":31,"24":31,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":4,"42":4,"43":4,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":3,"59":3,"60":3,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":3,"73":3,"74":3,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1},"f":{"0":54,"1":85,"2":85,"3":54,"4":85,"5":0,"6":139,"7":2,"8":31,"9":31,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":4,"21":4,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":3,"32":3,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":3,"41":3,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1},"b":{"0":[1,1,1],"1":[0,85],"2":[54,54],"3":[54,85],"4":[54,54],"5":[1,1,1],"6":[1,1],"7":[2,2]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/blog.spec.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/blog.spec.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\n\r\n\r\n// import request from 'supertest';\r\n// import app from './database'; \r\n// import { expect } from 'chai';\r\n// import User, { findOne }from './authentication';\r\n// import sinon, { SinonSpy } from 'sinon';\r\n// import jwt from 'jsonwebtoken';\r\n// import { Request, Response, NextFunction } from 'express';\r\n// import checkAuth from './checkauth';\r\n// import { doesNotMatch } from 'assert';\r\n\r\n// let userAuthToken:any;\r\n// let adminAuthToken:any;\r\n\r\n// before( async()=>{\r\n\r\n   \r\n//         // Log in an admin user and obtain the authentication token\r\n//         const adminLoginResponse = await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: 'dalidapcm@gmail.com',\r\n//                 password: '123456'\r\n//             })\r\n//             .expect(201);\r\n//         adminAuthToken = adminLoginResponse.body.yourtoken;\r\n//         console.log(adminAuthToken);\r\n\r\n\r\n//       // Authenticate a normal user\r\n//         const userLoginResponse =  await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: 'irumvaleon@gmail.com',\r\n//                 password: '123456'\r\n//             })\r\n//             .expect(201);\r\n//         userAuthToken = userLoginResponse.body.yourtoken;\r\n//         console.log(userAuthToken);\r\n//         });\r\n \r\n   \r\n \r\n   \r\n\r\n\r\n\r\n//  //  Test case for creating a new blog post by an admin user\r\n//     describe('POST /blogss by admin user', () => {\r\n//         it('should create a new blog post when authenticated as admin user', () => {\r\n//             const blogData = {\r\n//                 title: 'hello',\r\n//                 author: 'admin_user',\r\n//                 topictext: 'jfkjdkf',\r\n//                 description: 'fjkdjf'\r\n//             };\r\n\r\n//              request(app)\r\n//                 .post('/blogss')\r\n//                 .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//                 .send(blogData)\r\n//                 .expect(201);\r\n//                 });\r\n//         });\r\n    \r\n// //});\r\n\r\n\r\n//   //  Test case for creating a new blog post by a normal user\r\n//     describe('POST /blogss by normal user', () => {\r\n//         it('should create a new blog post when authenticated as normal user',  () => {\r\n//             const blogData = {\r\n//                 title: 'hello',\r\n//                 author: 'normal_user',\r\n//                 topictext: 'jfkjdkf',\r\n//                 description: 'fjkdjf'\r\n//             };\r\n\r\n//              request(app)\r\n//                 .post('/blogss')\r\n//                 .set('Authorization', `Bearer ${userAuthToken}`)\r\n//                 .send(blogData)\r\n//                 .expect(403);\r\n            \r\n\r\n//         });\r\n//     });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// describe('GET /blogss', () =>{\r\n//     it(\"getting all the blogs\", (done) => {\r\n//         request(app)\r\n//         .get('/blogss')\r\n//         .set('Authorization', `Bearer ${userAuthToken}`)\r\n//         .expect(200)\r\n//         .end((err: Error, res: request.Response) => {\r\n//             if (err) {\r\n//                 console.error(err);\r\n//                 return done(err);\r\n//             }\r\n//             done();\r\n//         });\r\n\r\n        \r\n//     });\r\n \r\n// }\r\n// );\r\n\r\n// let blogId: string;\r\n\r\n// describe('DELETE /blogss/:id', () => {\r\n// before(async() => {\r\n   \r\n//     const response = await request(app)\r\n//         .post('/blogss')\r\n//         .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//         .send({\r\n//             title: \"hello\",\r\n//             author: \"kagozi\",\r\n//             topictext: \"jfkjdkf\",\r\n//             description: \"fjkdjf\"\r\n//         })\r\n        \r\n//         .expect(201)\r\n//         blogId = response.body._id;\r\n//         console.log(blogId);\r\n//     })\r\n//     it('should delete 1 blog', () => {\r\n//         const response =  request(app)\r\n//         .delete(`/blogss/${blogId}`)\r\n//         .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//         .expect(200)\r\n        \r\n//     })\r\n//     it('should delete an existing 2 blog', () => {\r\n//          request(app)\r\n//         .delete(`/blogss/${blogId}`)\r\n//         .set('Authorization', `Bearer ${userAuthToken}`)\r\n//         .expect(403)\r\n        \r\n//     })\r\n\r\n//     it('should return 400 if the blog id is invalid',  () => {\r\n//          request(app)\r\n        \r\n//             .delete('/blogss/invalidId')\r\n//             .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//             .expect(500);\r\n            \r\n//     });\r\n//     it('should delete all the blogs', () => {\r\n//          request(app)\r\n       \r\n//         .delete('/blogss/deleteall')\r\n//         .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//         .expect(200);\r\n        \r\n//     })\r\n// })\r\n\r\n// describe('GET /blogss/:id', () => {\r\n//     before(async() => {\r\n   \r\n//         const response = await request(app)\r\n//             .post('/blogss')\r\n//             .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//             .send({\r\n//                 title: \"hello\",\r\n//                 author: \"kagozi\",\r\n//                 topictext: \"jfkjdkf\",\r\n//                 description: \"fjkdjf\"\r\n//             })\r\n//             .expect(201)\r\n//             blogId = response.body._id;\r\n//             console.log(blogId);\r\n//         })\r\n//         it('should get an existing blog', () => {\r\n//             const response =  request(app)\r\n//             .get(`/blogss/${blogId}`)\r\n//             .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//             .expect(200)\r\n        \r\n//         })\r\n//         it('should get an existing blog', () => {\r\n//             const response =  request(app)\r\n//             .get(`/blogss/${blogId}`)\r\n//             .set('Authorization', `Bearer ${userAuthToken}`)\r\n//             .expect(200)\r\n\r\n//         })\r\n//         it('should return 400 if the blog id is invalid',  () => {\r\n//              request(app)\r\n           \r\n//                 .get('/blogss/invalidId')\r\n//                 .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//                 .expect(500);\r\n                \r\n//         });\r\n    \r\n// })\r\n//  describe('PATCH /blogss/:id', () => {\r\n//      before(async() => {\r\n   \r\n//          const response = await request(app)\r\n//              .post('/blogss')\r\n//              .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//              .send({\r\n//                  title: \"hello\",\r\n//                  author: \"kagozi\",\r\n//                  topictext: \"jfkjdkf\",\r\n//                  description: \"fjkdjf\"\r\n//              })\r\n            \r\n//              .expect(201)\r\n//              blogId = response.body._id;\r\n//              console.log(blogId);\r\n//          })\r\n//          it('should get an updating blog', () => {\r\n//              const response =  request(app)\r\n             \r\n//              .patch(`/blogss/${blogId}`)\r\n//              .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//              .expect(200)\r\n            \r\n//          })\r\n//          it('should get an existing blog', () => {\r\n//             const response =  request(app)\r\n            \r\n//             .patch(`/blogss/${blogId}`)\r\n//             .set('Authorization', `Bearer ${userAuthToken}`)\r\n//             .expect(403)\r\n            \r\n//         })\r\n//          it('should return 400 if the blog id is invalid',  () => {\r\n//               request(app)\r\n           \r\n//                  .patch('/blogss/invalidId')\r\n//                  .set('Authorization', `Bearer ${adminAuthToken}`)\r\n//                  .expect(500);\r\n               \r\n//          });\r\n    \r\n//  })\r\nimport request from 'supertest';\r\nimport app from './database'; \r\nimport { expect } from 'chai';\r\nimport { before, beforeEach, describe, it } from 'mocha';\r\n\r\nlet userAuthToken: any;\r\nlet adminAuthToken: any;\r\nlet timeout = 20000;\r\n\r\nbeforeEach(async () => {\r\n    // Log in an admin user and obtain the authentication token\r\n    const adminLoginResponse = await request(app)\r\n        .post('/user/login')\r\n        .send({\r\n            email: 'dalidapcm@gmail.com',\r\n            password: '123456'\r\n        });\r\n    adminAuthToken = adminLoginResponse.body.yourtoken;\r\n\r\n    // Authenticate a normal user\r\n    const userLoginResponse = await request(app)\r\n        .post('/user/login')\r\n        .send({\r\n            email: 'irumvaleon@gmail.com',\r\n            password: '123456'\r\n        });\r\n    userAuthToken = userLoginResponse.body.yourtoken;\r\n});\r\n\r\ndescribe('POST /blogss by admin user', () => {\r\n    it('should create a new blog post when authenticated as admin user', async () => {\r\n        const blogData = {\r\n            title: 'hello',\r\n            author: 'admin_user',\r\n            topictext: 'jfkjdkf',\r\n            description: 'fjkdjf'\r\n        };\r\n\r\n        await request(app)\r\n            .post('/blogss')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .send(blogData)\r\n            .expect(201);\r\n    }).timeout(timeout);\r\n});\r\n\r\ndescribe('POST /blogss by normal user', () => {\r\n    it('should not create a new blog post when authenticated as normal user', async () => {\r\n        const blogData = {\r\n            title: 'hello',\r\n            author: 'normal_user',\r\n            topictext: 'jfkjdkf',\r\n            description: 'fjkdjf'\r\n        };\r\n\r\n        await request(app)\r\n            .post('/blogss')\r\n            .set('Authorization', `Bearer ${userAuthToken}`)\r\n            .send(blogData)\r\n            .expect(403);\r\n    }).timeout(timeout);\r\n});\r\n\r\ndescribe('GET /blogss', () => {\r\n    it(\"should get all the blogs\", async () => {\r\n        await request(app)\r\n            .get('/blogss')\r\n            .set('Authorization', `Bearer ${userAuthToken}`)\r\n            .expect(200);\r\n    }).timeout(timeout);\r\n});\r\n\r\ndescribe('DELETE /blogss/:id', () => {\r\n    let blogId: string;\r\n\r\n    beforeEach(async () => {\r\n        const response = await request(app)\r\n            .post('/blogss')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .send({\r\n                title: \"hello\",\r\n                author: \"kagozi\",\r\n                topictext: \"jfkjdkf\",\r\n                description: \"fjkdjf\"\r\n            });\r\n        blogId = response.body._id;\r\n    });\r\n\r\n    it('should delete an existing blog', async () => {\r\n        await request(app)\r\n            .delete(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(200);\r\n    });\r\n\r\n    it('should not delete an existing blog when authenticated as normal user', async () => {\r\n        await request(app)\r\n            .delete(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${userAuthToken}`)\r\n            .expect(403);\r\n    });\r\n\r\n    it('should return 400 if the blog id is invalid', async () => {\r\n        await request(app)\r\n            .delete('/blogss/invalidId')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(500);\r\n    });\r\n\r\n    it('should delete all the blogs', async () => {\r\n        await request(app)\r\n            .delete('/blogss/deleteall')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(200);\r\n    });\r\n});\r\n\r\ndescribe('GET /blogss/:id', () => {\r\n    let blogId: string;\r\n\r\n    beforeEach(async () => {\r\n        const response = await request(app)\r\n            .post('/blogss')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .send({\r\n                title: \"hello\",\r\n                author: \"kagozi\",\r\n                topictext: \"jfkjdkf\",\r\n                description: \"fjkdjf\"\r\n            });\r\n        blogId = response.body._id;\r\n    });\r\n\r\n    it('should get an existing blog when authenticated as admin user', async () => {\r\n        await request(app)\r\n            .get(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(200);\r\n    });\r\n\r\n    it('should get an existing blog when authenticated as normal user', async () => {\r\n        await request(app)\r\n            .get(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${userAuthToken}`)\r\n            .expect(200);\r\n    });\r\n\r\n    it('should return 400 if the blog id is invalid', async () => {\r\n        await request(app)\r\n            .get('/blogss/invalidId')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(500);\r\n    });\r\n});\r\n\r\ndescribe('PATCH /blogss/:id', () => {\r\n    let blogId: string;\r\n\r\n    beforeEach(async () => {\r\n        const response = await request(app)\r\n            .post('/blogss')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .send({\r\n                title: \"hello\",\r\n                author: \"kagozi\",\r\n                topictext: \"jfkjdkf\",\r\n                description: \"fjkdjf\"\r\n            });\r\n        blogId = response.body._id;\r\n    });\r\n\r\n    it('should update an existing blog when authenticated as admin user', async () => {\r\n        await request(app)\r\n            .patch(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(200);\r\n    });\r\n\r\n    it('should not update an existing blog when authenticated as normal user', async () => {\r\n        await request(app)\r\n            .patch(`/blogss/${blogId}`)\r\n            .set('Authorization', `Bearer ${userAuthToken}`)\r\n            .expect(403);\r\n    });\r\n\r\n    it('should return 400 if the blog id is invalid', async () => {\r\n        await request(app)\r\n            .patch('/blogss/invalidId')\r\n            .set('Authorization', `Bearer ${adminAuthToken}`)\r\n            .expect(500);\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"efa417a580db165cc5d18930696b39aa2ddbaa6a"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\database.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\database.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":29},"end":{"line":15,"column":75}},"16":{"start":{"line":16,"column":17},"end":{"line":16,"column":51}},"17":{"start":{"line":18,"column":24},"end":{"line":18,"column":63}},"18":{"start":{"line":19,"column":18},"end":{"line":19,"column":53}},"19":{"start":{"line":20,"column":19},"end":{"line":20,"column":40}},"20":{"start":{"line":21,"column":15},"end":{"line":21,"column":49}},"21":{"start":{"line":22,"column":19},"end":{"line":22,"column":57}},"22":{"start":{"line":23,"column":23},"end":{"line":23,"column":65}},"23":{"start":{"line":24,"column":20},"end":{"line":24,"column":59}},"24":{"start":{"line":25,"column":12},"end":{"line":25,"column":36}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":110}},"26":{"start":{"line":28,"column":4},"end":{"line":37,"column":7}},"27":{"start":{"line":29,"column":8},"end":{"line":36,"column":9}},"28":{"start":{"line":30,"column":12},"end":{"line":30,"column":44}},"29":{"start":{"line":31,"column":12},"end":{"line":31,"column":46}},"30":{"start":{"line":35,"column":12},"end":{"line":35,"column":66}},"31":{"start":{"line":39,"column":0},"end":{"line":39,"column":15}},"32":{"start":{"line":40,"column":0},"end":{"line":40,"column":34}},"33":{"start":{"line":41,"column":0},"end":{"line":56,"column":4}},"34":{"start":{"line":41,"column":55},"end":{"line":56,"column":2}},"35":{"start":{"line":42,"column":4},"end":{"line":55,"column":5}},"36":{"start":{"line":43,"column":58},"end":{"line":43,"column":66}},"37":{"start":{"line":44,"column":24},"end":{"line":49,"column":10}},"38":{"start":{"line":50,"column":26},"end":{"line":50,"column":46}},"39":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"40":{"start":{"line":54,"column":8},"end":{"line":54,"column":58}},"41":{"start":{"line":57,"column":0},"end":{"line":68,"column":4}},"42":{"start":{"line":57,"column":54},"end":{"line":68,"column":2}},"43":{"start":{"line":58,"column":4},"end":{"line":67,"column":5}},"44":{"start":{"line":59,"column":22},"end":{"line":59,"column":51}},"45":{"start":{"line":60,"column":8},"end":{"line":63,"column":42}},"46":{"start":{"line":61,"column":12},"end":{"line":61,"column":40}},"47":{"start":{"line":63,"column":12},"end":{"line":63,"column":42}},"48":{"start":{"line":66,"column":8},"end":{"line":66,"column":36}},"49":{"start":{"line":69,"column":0},"end":{"line":80,"column":4}},"50":{"start":{"line":69,"column":58},"end":{"line":80,"column":2}},"51":{"start":{"line":70,"column":4},"end":{"line":79,"column":5}},"52":{"start":{"line":71,"column":21},"end":{"line":71,"column":65}},"53":{"start":{"line":72,"column":8},"end":{"line":75,"column":39}},"54":{"start":{"line":73,"column":12},"end":{"line":73,"column":50}},"55":{"start":{"line":75,"column":12},"end":{"line":75,"column":39}},"56":{"start":{"line":78,"column":8},"end":{"line":78,"column":54}},"57":{"start":{"line":81,"column":0},"end":{"line":92,"column":4}},"58":{"start":{"line":81,"column":60},"end":{"line":92,"column":2}},"59":{"start":{"line":82,"column":4},"end":{"line":91,"column":5}},"60":{"start":{"line":83,"column":21},"end":{"line":83,"column":99}},"61":{"start":{"line":84,"column":8},"end":{"line":87,"column":39}},"62":{"start":{"line":85,"column":12},"end":{"line":85,"column":50}},"63":{"start":{"line":87,"column":12},"end":{"line":87,"column":39}},"64":{"start":{"line":90,"column":8},"end":{"line":90,"column":54}},"65":{"start":{"line":93,"column":0},"end":{"line":115,"column":4}},"66":{"start":{"line":93,"column":61},"end":{"line":115,"column":2}},"67":{"start":{"line":94,"column":4},"end":{"line":114,"column":5}},"68":{"start":{"line":95,"column":8},"end":{"line":101,"column":9}},"69":{"start":{"line":96,"column":12},"end":{"line":96,"column":48}},"70":{"start":{"line":97,"column":12},"end":{"line":97,"column":71}},"71":{"start":{"line":100,"column":12},"end":{"line":100,"column":61}},"72":{"start":{"line":104,"column":8},"end":{"line":113,"column":9}},"73":{"start":{"line":105,"column":25},"end":{"line":105,"column":78}},"74":{"start":{"line":106,"column":12},"end":{"line":109,"column":66}},"75":{"start":{"line":107,"column":16},"end":{"line":107,"column":54}},"76":{"start":{"line":109,"column":16},"end":{"line":109,"column":66}},"77":{"start":{"line":112,"column":12},"end":{"line":112,"column":58}},"78":{"start":{"line":116,"column":0},"end":{"line":116,"column":41}},"79":{"start":{"line":117,"column":0},"end":{"line":117,"column":41}},"80":{"start":{"line":118,"column":0},"end":{"line":120,"column":3}},"81":{"start":{"line":119,"column":4},"end":{"line":119,"column":49}},"82":{"start":{"line":121,"column":0},"end":{"line":121,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"exampleUsage","decl":{"start":{"line":27,"column":9},"end":{"line":27,"column":21}},"loc":{"start":{"line":27,"column":24},"end":{"line":38,"column":1}},"line":27},"9":{"name":"(anonymous_9)","decl":{"start":{"line":28,"column":43},"end":{"line":28,"column":44}},"loc":{"start":{"line":28,"column":56},"end":{"line":37,"column":5}},"line":28},"10":{"name":"(anonymous_10)","decl":{"start":{"line":41,"column":41},"end":{"line":41,"column":42}},"loc":{"start":{"line":41,"column":55},"end":{"line":56,"column":2}},"line":41},"11":{"name":"(anonymous_11)","decl":{"start":{"line":41,"column":89},"end":{"line":41,"column":90}},"loc":{"start":{"line":41,"column":102},"end":{"line":56,"column":1}},"line":41},"12":{"name":"(anonymous_12)","decl":{"start":{"line":57,"column":40},"end":{"line":57,"column":41}},"loc":{"start":{"line":57,"column":54},"end":{"line":68,"column":2}},"line":57},"13":{"name":"(anonymous_13)","decl":{"start":{"line":57,"column":88},"end":{"line":57,"column":89}},"loc":{"start":{"line":57,"column":101},"end":{"line":68,"column":1}},"line":57},"14":{"name":"(anonymous_14)","decl":{"start":{"line":69,"column":44},"end":{"line":69,"column":45}},"loc":{"start":{"line":69,"column":58},"end":{"line":80,"column":2}},"line":69},"15":{"name":"(anonymous_15)","decl":{"start":{"line":69,"column":92},"end":{"line":69,"column":93}},"loc":{"start":{"line":69,"column":105},"end":{"line":80,"column":1}},"line":69},"16":{"name":"(anonymous_16)","decl":{"start":{"line":81,"column":46},"end":{"line":81,"column":47}},"loc":{"start":{"line":81,"column":60},"end":{"line":92,"column":2}},"line":81},"17":{"name":"(anonymous_17)","decl":{"start":{"line":81,"column":94},"end":{"line":81,"column":95}},"loc":{"start":{"line":81,"column":107},"end":{"line":92,"column":1}},"line":81},"18":{"name":"(anonymous_18)","decl":{"start":{"line":93,"column":47},"end":{"line":93,"column":48}},"loc":{"start":{"line":93,"column":61},"end":{"line":115,"column":2}},"line":93},"19":{"name":"(anonymous_19)","decl":{"start":{"line":93,"column":95},"end":{"line":93,"column":96}},"loc":{"start":{"line":93,"column":108},"end":{"line":115,"column":1}},"line":93},"20":{"name":"(anonymous_20)","decl":{"start":{"line":118,"column":17},"end":{"line":118,"column":18}},"loc":{"start":{"line":118,"column":23},"end":{"line":120,"column":1}},"line":118}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":60,"column":8},"end":{"line":63,"column":42}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":63,"column":42}},{"start":{"line":60,"column":8},"end":{"line":63,"column":42}}],"line":60},"9":{"loc":{"start":{"line":72,"column":8},"end":{"line":75,"column":39}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":75,"column":39}},{"start":{"line":72,"column":8},"end":{"line":75,"column":39}}],"line":72},"10":{"loc":{"start":{"line":84,"column":8},"end":{"line":87,"column":39}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":87,"column":39}},{"start":{"line":84,"column":8},"end":{"line":87,"column":39}}],"line":84},"11":{"loc":{"start":{"line":94,"column":4},"end":{"line":114,"column":5}},"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":114,"column":5}},{"start":{"line":94,"column":4},"end":{"line":114,"column":5}}],"line":94},"12":{"loc":{"start":{"line":106,"column":12},"end":{"line":109,"column":66}},"type":"if","locations":[{"start":{"line":106,"column":12},"end":{"line":109,"column":66}},{"start":{"line":106,"column":12},"end":{"line":109,"column":66}}],"line":106}},"s":{"0":1,"1":21,"2":9,"3":21,"4":18,"5":18,"6":0,"7":3,"8":3,"9":0,"10":42,"11":21,"12":1,"13":7,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":0,"31":1,"32":1,"33":1,"34":11,"35":11,"36":11,"37":11,"38":11,"39":11,"40":0,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":0,"48":0,"49":1,"50":3,"51":3,"52":3,"53":2,"54":0,"55":2,"56":1,"57":1,"58":2,"59":2,"60":2,"61":1,"62":0,"63":1,"64":1,"65":1,"66":3,"67":3,"68":1,"69":1,"70":1,"71":0,"72":2,"73":2,"74":1,"75":0,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1},"f":{"0":21,"1":21,"2":9,"3":21,"4":18,"5":3,"6":42,"7":7,"8":1,"9":1,"10":11,"11":11,"12":1,"13":1,"14":3,"15":3,"16":2,"17":2,"18":3,"19":3,"20":1},"b":{"0":[1,1,1],"1":[12,9],"2":[21,21],"3":[21,21],"4":[21,21],"5":[1,1,1],"6":[1,6],"7":[7,7],"8":[1,0],"9":[0,2],"10":[0,1],"11":[1,2],"12":[0,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/database.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/database.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport YAML from 'yamljs';\r\n// Define the type for the Swagger document\r\ninterface SwaggerDocument {\r\n    // Define the structure of your Swagger document here\r\n    // For example:\r\n    info: {\r\n      title: string;\r\n      version: string;\r\n      description?: string;\r\n    };\r\n    // Add other properties as needed\r\n  }\r\n \r\n  \r\n  // Load the Swagger document\r\n  const swaggerDocument: SwaggerDocument = YAML.load('./swagger.yaml');\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\nimport express from 'express';\r\nimport {connect , close} from './mongoose';\r\nimport Blog from './blog'\r\nimport router from './messages';\r\nimport routerUser from './authenticate';\r\nimport checkAuth from './checkauth';\r\n\r\nconst app = express();\r\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\r\n\r\nasync function exampleUsage() {\r\n    try {\r\n        await connect();\r\n        console.log('Database connected');\r\n        // Perform database operations here\r\n    } catch (error) {\r\n        console.error('Error connecting to database:', error);\r\n    }\r\n}\r\nexampleUsage();\r\napp.use(express.json());\r\napp.post('/blogss',checkAuth, async (req, res) => {\r\n    try {\r\n        const { title, author, topictext, description } = req.body;\r\n        const newBlog = new Blog({\r\n            title,\r\n            author,\r\n            topictext,\r\n            description\r\n        });\r\n        const SavedBlog = await newBlog.save();\r\n        res.status(201).json(SavedBlog);\r\n    } catch (error) {\r\n        res.status(500).send('Error creating blog entry');\r\n    }\r\n});\r\napp.get('/blogss',checkAuth, async (req, res) => {\r\n    try {\r\n        const blogs = await Blog.find({});\r\n        if (blogs.length !== 0)\r\n            res.status(200).send(blogs);\r\n        else\r\n            res.status(200).send('EMPTY');\r\n    } catch (error) {\r\n        res.status(500).send(error);\r\n    }\r\n});\r\n\r\napp.get('/blogss/:id',checkAuth, async (req, res) => {\r\n    try {\r\n        const blog = await Blog.findById(req.params.id);\r\n        if (!blog)\r\n            res.status(404).send('No blog found');\r\n        else\r\n            res.status(200).send(blog);\r\n    } catch (error) {\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n});\r\n\r\napp.patch('/blogss/:id',checkAuth, async (req, res) => {\r\n    try {\r\n        const blog = await Blog.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n        if (!blog)\r\n            res.status(404).send('No blog found');\r\n        else\r\n            res.status(200).send(blog);\r\n    } catch (error) {\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n});\r\n\r\napp.delete('/blogss/:id', checkAuth, async (req, res) => {\r\n    if (req.params.id === 'deleteall') {\r\n        try {\r\n            await Blog.deleteMany({});\r\n            res.status(200).send('All documents deleted successfully');\r\n        } catch (err) {\r\n            res.status(500).send('Error deleting documents');\r\n        }\r\n    } else {\r\n        try {\r\n            const blog = await Blog.findByIdAndDelete(req.params.id);\r\n            if (!blog)\r\n                res.status(404).send('No blog found');\r\n            else\r\n                res.status(200).send('Blog deleted successfully');\r\n        } catch (error) {\r\n            res.status(500).send('Internal Server Error');\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\napp.use('/messages', router);\r\napp.use('/user', routerUser);\r\n\r\napp.listen(4000 , () => {\r\n    console.log('server is running on the port')\r\n\r\n} )\r\nexport default app;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3b55127c025ac4064bcd32750a2ee249cfce4a02"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\mongoose.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\mongoose.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":9,"column":4},"end":{"line":16,"column":7}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":51}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":62}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":20}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":26}},"10":{"start":{"line":20,"column":4},"end":{"line":20,"column":43}},"11":{"start":{"line":22,"column":0},"end":{"line":22,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"connect","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":16}},"loc":{"start":{"line":8,"column":19},"end":{"line":17,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":14},"end":{"line":10,"column":15}},"loc":{"start":{"line":10,"column":20},"end":{"line":12,"column":5}},"line":10},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":15},"end":{"line":13,"column":16}},"loc":{"start":{"line":13,"column":26},"end":{"line":16,"column":5}},"line":13},"4":{"name":"close","decl":{"start":{"line":19,"column":9},"end":{"line":19,"column":14}},"loc":{"start":{"line":19,"column":17},"end":{"line":21,"column":1}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":1},"f":{"0":1,"1":1,"2":1,"3":0,"4":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/mongoose.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/mongoose.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA+B;AAE/B,SAAgB,OAAO;IACnB,OAAO,kBAAQ,CAAC,OAAO,CAAC,0GAA0G,CAAC;SAC9H,IAAI,CAAC,GAAG,EAAE;QACP,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC/C,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC,CAAC,kDAAkD;IACnE,CAAC,CAAC,CAAC;AACX,CAAC;AATD,0BASC;AAED,SAAgB,KAAK;IACjB,OAAO,kBAAQ,CAAC,UAAU,EAAE,CAAC;AACjC,CAAC;AAFD,sBAEC","sourcesContent":["import mongoose from 'mongoose'\r\n\r\nexport function connect() {\r\n    return mongoose.connect('mongodb+srv://leon:Ikln2003!!@cluster0.eqsgfdd.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\r\n        .then(() => {\r\n            console.log('Database created successful');\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error connecting to database:', error);\r\n            throw error; // Rethrow the error to propagate it to the caller\r\n        });\r\n}\r\n\r\nexport function close() {\r\n    return mongoose.disconnect();\r\n}\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"97fe7ee929adee53d68b45273805989b98d32e05"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\blog.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\blog.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":19},"end":{"line":5,"column":55}},"3":{"start":{"line":6,"column":19},"end":{"line":11,"column":20}},"4":{"start":{"line":12,"column":13},"end":{"line":12,"column":57}},"5":{"start":{"line":13,"column":0},"end":{"line":13,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"f":{"0":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/blog.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/blog.ts"],"names":[],"mappings":";;;;AAAA,wDAAgC;AAEhC,MAAM,UAAU,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAAC;IACnC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;IACtD,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACxC,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC3C,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;CAChD,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAErB,MAAM,IAAI,GAAG,kBAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAEhD,iBAAS,IAAI,CAAC","sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst blogSchema = new mongoose.Schema({\r\n    title: { type: String, required: true, maxlength: 20 },\r\n    author: { type: String, required: true },\r\n    topictext: { type: String, required: true },\r\n    description: { type: String, required: true }\r\n}, { strict: true });\r\n\r\nconst Blog = mongoose.model('Blog', blogSchema);\r\n\r\nexport = Blog;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d2290cd2498577339f68d6d0528ca37de654096b"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\messages.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\messages.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":22}},"15":{"start":{"line":15,"column":25},"end":{"line":15,"column":69}},"16":{"start":{"line":16,"column":18},"end":{"line":16,"column":53}},"17":{"start":{"line":18,"column":15},"end":{"line":18,"column":41}},"18":{"start":{"line":19,"column":0},"end":{"line":39,"column":4}},"19":{"start":{"line":19,"column":31},"end":{"line":39,"column":2}},"20":{"start":{"line":20,"column":4},"end":{"line":38,"column":5}},"21":{"start":{"line":21,"column":69},"end":{"line":21,"column":77}},"22":{"start":{"line":22,"column":27},"end":{"line":28,"column":10}},"23":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"24":{"start":{"line":30,"column":12},"end":{"line":30,"column":70}},"25":{"start":{"line":32,"column":26},"end":{"line":32,"column":49}},"26":{"start":{"line":33,"column":8},"end":{"line":33,"column":40}},"27":{"start":{"line":36,"column":8},"end":{"line":36,"column":59}},"28":{"start":{"line":37,"column":8},"end":{"line":37,"column":58}},"29":{"start":{"line":40,"column":0},"end":{"line":51,"column":3}},"30":{"start":{"line":41,"column":4},"end":{"line":50,"column":7}},"31":{"start":{"line":43,"column":8},"end":{"line":46,"column":54}},"32":{"start":{"line":44,"column":12},"end":{"line":44,"column":43}},"33":{"start":{"line":46,"column":12},"end":{"line":46,"column":54}},"34":{"start":{"line":49,"column":8},"end":{"line":49,"column":54}},"35":{"start":{"line":52,"column":0},"end":{"line":63,"column":3}},"36":{"start":{"line":53,"column":4},"end":{"line":62,"column":7}},"37":{"start":{"line":55,"column":8},"end":{"line":58,"column":42}},"38":{"start":{"line":56,"column":12},"end":{"line":56,"column":53}},"39":{"start":{"line":58,"column":12},"end":{"line":58,"column":42}},"40":{"start":{"line":61,"column":8},"end":{"line":61,"column":54}},"41":{"start":{"line":64,"column":0},"end":{"line":75,"column":3}},"42":{"start":{"line":65,"column":4},"end":{"line":74,"column":7}},"43":{"start":{"line":67,"column":8},"end":{"line":70,"column":42}},"44":{"start":{"line":68,"column":12},"end":{"line":68,"column":53}},"45":{"start":{"line":70,"column":12},"end":{"line":70,"column":42}},"46":{"start":{"line":73,"column":8},"end":{"line":73,"column":54}},"47":{"start":{"line":76,"column":0},"end":{"line":98,"column":4}},"48":{"start":{"line":76,"column":36},"end":{"line":98,"column":2}},"49":{"start":{"line":77,"column":4},"end":{"line":97,"column":5}},"50":{"start":{"line":78,"column":8},"end":{"line":84,"column":9}},"51":{"start":{"line":79,"column":12},"end":{"line":79,"column":58}},"52":{"start":{"line":80,"column":12},"end":{"line":80,"column":70}},"53":{"start":{"line":83,"column":12},"end":{"line":83,"column":60}},"54":{"start":{"line":87,"column":8},"end":{"line":96,"column":11}},"55":{"start":{"line":89,"column":12},"end":{"line":92,"column":69}},"56":{"start":{"line":90,"column":16},"end":{"line":90,"column":57}},"57":{"start":{"line":92,"column":16},"end":{"line":92,"column":69}},"58":{"start":{"line":95,"column":12},"end":{"line":95,"column":58}},"59":{"start":{"line":99,"column":0},"end":{"line":99,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":19,"column":17},"end":{"line":19,"column":18}},"loc":{"start":{"line":19,"column":31},"end":{"line":39,"column":2}},"line":19},"9":{"name":"(anonymous_9)","decl":{"start":{"line":19,"column":65},"end":{"line":19,"column":66}},"loc":{"start":{"line":19,"column":78},"end":{"line":39,"column":1}},"line":19},"10":{"name":"(anonymous_10)","decl":{"start":{"line":40,"column":16},"end":{"line":40,"column":17}},"loc":{"start":{"line":40,"column":30},"end":{"line":51,"column":1}},"line":40},"11":{"name":"(anonymous_11)","decl":{"start":{"line":42,"column":14},"end":{"line":42,"column":15}},"loc":{"start":{"line":42,"column":28},"end":{"line":47,"column":5}},"line":42},"12":{"name":"(anonymous_12)","decl":{"start":{"line":48,"column":15},"end":{"line":48,"column":16}},"loc":{"start":{"line":48,"column":26},"end":{"line":50,"column":5}},"line":48},"13":{"name":"(anonymous_13)","decl":{"start":{"line":52,"column":19},"end":{"line":52,"column":20}},"loc":{"start":{"line":52,"column":33},"end":{"line":63,"column":1}},"line":52},"14":{"name":"(anonymous_14)","decl":{"start":{"line":54,"column":14},"end":{"line":54,"column":15}},"loc":{"start":{"line":54,"column":27},"end":{"line":59,"column":5}},"line":54},"15":{"name":"(anonymous_15)","decl":{"start":{"line":60,"column":15},"end":{"line":60,"column":16}},"loc":{"start":{"line":60,"column":26},"end":{"line":62,"column":5}},"line":60},"16":{"name":"(anonymous_16)","decl":{"start":{"line":64,"column":21},"end":{"line":64,"column":22}},"loc":{"start":{"line":64,"column":35},"end":{"line":75,"column":1}},"line":64},"17":{"name":"(anonymous_17)","decl":{"start":{"line":66,"column":14},"end":{"line":66,"column":15}},"loc":{"start":{"line":66,"column":27},"end":{"line":71,"column":5}},"line":66},"18":{"name":"(anonymous_18)","decl":{"start":{"line":72,"column":15},"end":{"line":72,"column":16}},"loc":{"start":{"line":72,"column":26},"end":{"line":74,"column":5}},"line":72},"19":{"name":"(anonymous_19)","decl":{"start":{"line":76,"column":22},"end":{"line":76,"column":23}},"loc":{"start":{"line":76,"column":36},"end":{"line":98,"column":2}},"line":76},"20":{"name":"(anonymous_20)","decl":{"start":{"line":76,"column":70},"end":{"line":76,"column":71}},"loc":{"start":{"line":76,"column":83},"end":{"line":98,"column":1}},"line":76},"21":{"name":"(anonymous_21)","decl":{"start":{"line":88,"column":18},"end":{"line":88,"column":19}},"loc":{"start":{"line":88,"column":31},"end":{"line":93,"column":9}},"line":88},"22":{"name":"(anonymous_22)","decl":{"start":{"line":94,"column":19},"end":{"line":94,"column":20}},"loc":{"start":{"line":94,"column":30},"end":{"line":96,"column":9}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},{"start":{"line":29,"column":8},"end":{"line":31,"column":9}}],"line":29},"9":{"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":73}},"type":"binary-expr","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":22}},{"start":{"line":29,"column":26},"end":{"line":29,"column":35}},{"start":{"line":29,"column":39},"end":{"line":29,"column":45}},{"start":{"line":29,"column":49},"end":{"line":29,"column":57}},{"start":{"line":29,"column":61},"end":{"line":29,"column":73}}],"line":29},"10":{"loc":{"start":{"line":43,"column":8},"end":{"line":46,"column":54}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":46,"column":54}},{"start":{"line":43,"column":8},"end":{"line":46,"column":54}}],"line":43},"11":{"loc":{"start":{"line":55,"column":8},"end":{"line":58,"column":42}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":58,"column":42}},{"start":{"line":55,"column":8},"end":{"line":58,"column":42}}],"line":55},"12":{"loc":{"start":{"line":67,"column":8},"end":{"line":70,"column":42}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":70,"column":42}},{"start":{"line":67,"column":8},"end":{"line":70,"column":42}}],"line":67},"13":{"loc":{"start":{"line":77,"column":4},"end":{"line":97,"column":5}},"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":97,"column":5}},{"start":{"line":77,"column":4},"end":{"line":97,"column":5}}],"line":77},"14":{"loc":{"start":{"line":89,"column":12},"end":{"line":92,"column":69}},"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":92,"column":69}},{"start":{"line":89,"column":12},"end":{"line":92,"column":69}}],"line":89}},"s":{"0":1,"1":5,"2":1,"3":8,"4":5,"5":5,"6":0,"7":0,"8":0,"9":0,"10":13,"11":8,"12":1,"13":2,"14":1,"15":1,"16":1,"17":1,"18":1,"19":5,"20":5,"21":5,"22":5,"23":5,"24":1,"25":4,"26":4,"27":0,"28":0,"29":1,"30":1,"31":1,"32":1,"33":0,"34":0,"35":1,"36":2,"37":1,"38":0,"39":1,"40":1,"41":1,"42":2,"43":1,"44":0,"45":1,"46":1,"47":1,"48":3,"49":3,"50":1,"51":1,"52":1,"53":0,"54":2,"55":1,"56":0,"57":1,"58":1,"59":1},"f":{"0":8,"1":5,"2":1,"3":8,"4":5,"5":0,"6":13,"7":2,"8":5,"9":5,"10":1,"11":1,"12":0,"13":2,"14":1,"15":1,"16":2,"17":1,"18":1,"19":3,"20":3,"21":1,"22":1},"b":{"0":[1,1,1],"1":[4,1],"2":[8,8],"3":[8,5],"4":[8,8],"5":[1,1,1],"6":[0,2],"7":[2,2],"8":[1,4],"9":[5,4,4,4,4],"10":[1,0],"11":[0,1],"12":[0,1],"13":[1,2],"14":[0,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/messages.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/messages.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,sBAAoB;AACpB,sEAAuC,CAAC,+CAA+C;AACvF,sDAA0C;AAC1C,sCAAsC;AAEtC,MAAM,MAAM,GAAW,iBAAO,CAAC,MAAM,EAAE,CAAC;AAGxC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAG,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;IACjC,IAAI,CAAC;QACD,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACtE,MAAM,UAAU,GAAG,IAAI,wBAAO,CAAC;YAC3B,SAAS;YACT,QAAQ;YACR,KAAK;YACL,OAAO;YACP,WAAW;SACd,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAChE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QAC1C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACtD,CAAC;AACL,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACzB,wBAAO,CAAC,IAAI,CAAC,EAAE,CAAC;SACX,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;QACf,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;YACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;YAE/B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAClD,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC5B,wBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;SAC1B,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QACd,IAAI,CAAC,OAAO;YACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;YAEzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,CAAC,MAAM,EAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC/B,wBAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SAC5D,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QACd,IAAI,CAAC,OAAO;YACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;YAEzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;IACrC,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC;YACD,MAAM,wBAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC7B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAC9D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,wBAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aACnC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACd,IAAI,CAAC,OAAO;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;gBAEzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC7D,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACX,CAAC;AACL,CAAC,CAAA,CAAC,CAAC;AACH,iBAAS,MAAM,CAAC","sourcesContent":["import './mongoose';\r\nimport Message from './schemamessages'; // Assuming 'message' is the correct model name\r\nimport express, { Router } from 'express';\r\n//import checkAuth from './checkauth';\r\n\r\nconst router: Router = express.Router();\r\n\r\n\r\nrouter.post('/',  async (req, res) => {\r\n    try {\r\n        const { firstname, lastname, email, subject, description } = req.body;\r\n        const newMessage = new Message({\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            subject,\r\n            description\r\n        });\r\n        if (!firstname || !lastname || !email || !subject || !description) {\r\n            return res.status(400).json({ error: 'Incomplete data' });\r\n        }\r\n        \r\n        const savedBlog = await newMessage.save();\r\n        res.status(201).json(savedBlog);\r\n    } catch (error) {\r\n        console.error('Error creating blog entry:', error);\r\n        res.status(500).send('Error creating blog entry');\r\n    }\r\n});\r\n\r\nrouter.get('/', (req, res) => {\r\n    Message.find({})\r\n        .then((messages) => {\r\n            if (messages.length !== 0)\r\n                res.status(200).send(messages);\r\n            else\r\n                res.status(200).send('No messages found');\r\n        })\r\n        .catch((error) => {\r\n            res.status(500).send('Internal Server Error');\r\n        });\r\n});\r\n\r\nrouter.get('/:id', (req, res) => {\r\n    Message.findById(req.params.id)\r\n        .then((message) => {\r\n            if (!message)\r\n                res.status(404).send('No message found');\r\n            else\r\n                res.status(200).send(message);\r\n        })\r\n        .catch((error) => {\r\n            res.status(500).send('Internal Server Error');\r\n        });\r\n});\r\n\r\nrouter.patch('/:id',  (req, res) => {\r\n    Message.findByIdAndUpdate(req.params.id, req.body, { new: true })\r\n        .then((message) => {\r\n            if (!message)\r\n                res.status(404).send('No message found');\r\n            else\r\n                res.status(200).send(message);\r\n        })\r\n        .catch((error) => {\r\n            res.status(500).send('Internal Server Error');\r\n        });\r\n});\r\n\r\nrouter.delete('/:id', async (req, res) => {\r\n    if (req.params.id === 'deleteall') {\r\n        try {\r\n            await Message.deleteMany({});\r\n            res.status(200).send('All messages deleted successfully');\r\n        } catch (err) {\r\n            res.status(500).send('Error deleting messages');\r\n        }\r\n    } else {\r\n        Message.findByIdAndDelete(req.params.id)\r\n            .then((message) => {\r\n                if (!message)\r\n                    res.status(404).send('No message found');\r\n                else\r\n                    res.status(200).send('Message deleted successfully');\r\n            })\r\n            .catch((error) => {\r\n                res.status(500).send('Internal Server Error');\r\n            });\r\n    }\r\n});\r\nexport = router;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bb2401965f327779110ad929287c6c548df8dd84"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\schemamessages.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\schemamessages.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":19},"end":{"line":5,"column":55}},"3":{"start":{"line":6,"column":17},"end":{"line":12,"column":20}},"4":{"start":{"line":13,"column":17},"end":{"line":13,"column":62}},"5":{"start":{"line":14,"column":0},"end":{"line":14,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"f":{"0":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/schemamessages.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/schemamessages.ts"],"names":[],"mappings":";;;;AAAA,wDAA+B;AAC/B,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,MAAM,CACjC;IACI,SAAS,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC;IACzC,QAAQ,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC;IACxC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,mCAAmC,EAAC;IAClF,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC;IACxC,WAAW,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC;CAAE,EAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CACpE,CAAA;AACD,MAAM,QAAQ,GAAG,kBAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AACrD,iBAAS,QAAQ,CAAC","sourcesContent":["import mongoose from 'mongoose'\r\nconst Messages = new mongoose.Schema(\r\n   {\r\n       firstname: {type: String, required: true},\r\n       lastname: {type: String, required: true},\r\n       email: { type: String, required: true, match: /^[\\w.%-]+@[\\w.-]+\\.[a-zA-Z]{2,4}$/},\r\n       subject: { type: String, required: true},\r\n       description: {type: String, required: true} },{ strict: true }\r\n) \r\nconst messages = mongoose.model('message', Messages);\r\nexport = messages;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"45766026eec6d30df6c0a7c9cc4f5402794ab789"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\authenticate.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\authenticate.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":23},"end":{"line":5,"column":63}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":69}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":51}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":45}},"7":{"start":{"line":10,"column":0},"end":{"line":59,"column":3}},"8":{"start":{"line":11,"column":4},"end":{"line":58,"column":7}},"9":{"start":{"line":13,"column":8},"end":{"line":52,"column":9}},"10":{"start":{"line":14,"column":12},"end":{"line":16,"column":15}},"11":{"start":{"line":19,"column":12},"end":{"line":51,"column":15}},"12":{"start":{"line":20,"column":16},"end":{"line":50,"column":17}},"13":{"start":{"line":21,"column":20},"end":{"line":23,"column":23}},"14":{"start":{"line":27,"column":20},"end":{"line":40,"column":21}},"15":{"start":{"line":28,"column":24},"end":{"line":32,"column":27}},"16":{"start":{"line":35,"column":24},"end":{"line":39,"column":27}},"17":{"start":{"line":41,"column":20},"end":{"line":49,"column":23}},"18":{"start":{"line":43,"column":24},"end":{"line":43,"column":51}},"19":{"start":{"line":46,"column":24},"end":{"line":48,"column":27}},"20":{"start":{"line":55,"column":8},"end":{"line":57,"column":11}},"21":{"start":{"line":60,"column":0},"end":{"line":99,"column":3}},"22":{"start":{"line":61,"column":4},"end":{"line":98,"column":7}},"23":{"start":{"line":63,"column":8},"end":{"line":67,"column":9}},"24":{"start":{"line":64,"column":12},"end":{"line":66,"column":15}},"25":{"start":{"line":68,"column":8},"end":{"line":92,"column":11}},"26":{"start":{"line":69,"column":12},"end":{"line":73,"column":13}},"27":{"start":{"line":70,"column":16},"end":{"line":72,"column":19}},"28":{"start":{"line":74,"column":26},"end":{"line":79,"column":14}},"29":{"start":{"line":80,"column":12},"end":{"line":91,"column":13}},"30":{"start":{"line":81,"column":16},"end":{"line":84,"column":19}},"31":{"start":{"line":87,"column":16},"end":{"line":90,"column":19}},"32":{"start":{"line":95,"column":8},"end":{"line":97,"column":11}},"33":{"start":{"line":100,"column":0},"end":{"line":100,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":27},"end":{"line":10,"column":28}},"loc":{"start":{"line":10,"column":47},"end":{"line":59,"column":1}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":14},"end":{"line":12,"column":15}},"loc":{"start":{"line":12,"column":22},"end":{"line":53,"column":5}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":19,"column":57},"end":{"line":19,"column":58}},"loc":{"start":{"line":19,"column":72},"end":{"line":51,"column":13}},"line":19},"4":{"name":"(anonymous_4)","decl":{"start":{"line":42,"column":30},"end":{"line":42,"column":31}},"loc":{"start":{"line":42,"column":36},"end":{"line":44,"column":21}},"line":42},"5":{"name":"(anonymous_5)","decl":{"start":{"line":45,"column":31},"end":{"line":45,"column":32}},"loc":{"start":{"line":45,"column":37},"end":{"line":49,"column":21}},"line":45},"6":{"name":"(anonymous_6)","decl":{"start":{"line":54,"column":15},"end":{"line":54,"column":16}},"loc":{"start":{"line":54,"column":22},"end":{"line":58,"column":5}},"line":54},"7":{"name":"(anonymous_7)","decl":{"start":{"line":60,"column":26},"end":{"line":60,"column":27}},"loc":{"start":{"line":60,"column":40},"end":{"line":99,"column":1}},"line":60},"8":{"name":"(anonymous_8)","decl":{"start":{"line":62,"column":14},"end":{"line":62,"column":15}},"loc":{"start":{"line":62,"column":22},"end":{"line":93,"column":5}},"line":62},"9":{"name":"(anonymous_9)","decl":{"start":{"line":68,"column":67},"end":{"line":68,"column":68}},"loc":{"start":{"line":68,"column":84},"end":{"line":92,"column":9}},"line":68},"10":{"name":"(anonymous_10)","decl":{"start":{"line":94,"column":15},"end":{"line":94,"column":16}},"loc":{"start":{"line":94,"column":22},"end":{"line":98,"column":5}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":13,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":52,"column":9}},{"start":{"line":13,"column":8},"end":{"line":52,"column":9}}],"line":13},"4":{"loc":{"start":{"line":20,"column":16},"end":{"line":50,"column":17}},"type":"if","locations":[{"start":{"line":20,"column":16},"end":{"line":50,"column":17}},{"start":{"line":20,"column":16},"end":{"line":50,"column":17}}],"line":20},"5":{"loc":{"start":{"line":27,"column":20},"end":{"line":40,"column":21}},"type":"if","locations":[{"start":{"line":27,"column":20},"end":{"line":40,"column":21}},{"start":{"line":27,"column":20},"end":{"line":40,"column":21}}],"line":27},"6":{"loc":{"start":{"line":63,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":67,"column":9}},{"start":{"line":63,"column":8},"end":{"line":67,"column":9}}],"line":63},"7":{"loc":{"start":{"line":69,"column":12},"end":{"line":73,"column":13}},"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":73,"column":13}},{"start":{"line":69,"column":12},"end":{"line":73,"column":13}}],"line":69},"8":{"loc":{"start":{"line":69,"column":16},"end":{"line":69,"column":30}},"type":"binary-expr","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":19}},{"start":{"line":69,"column":23},"end":{"line":69,"column":30}}],"line":69},"9":{"loc":{"start":{"line":80,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":91,"column":13}},{"start":{"line":80,"column":12},"end":{"line":91,"column":13}}],"line":80}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":3,"9":3,"10":2,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":66,"23":66,"24":1,"25":65,"26":65,"27":1,"28":64,"29":64,"30":32,"31":32,"32":0,"33":1},"f":{"0":4,"1":3,"2":3,"3":1,"4":0,"5":0,"6":0,"7":66,"8":66,"9":65,"10":0},"b":{"0":[1,1,1],"1":[0,4],"2":[4,4],"3":[2,1],"4":[1,0],"5":[0,0],"6":[1,65],"7":[1,64],"8":[65,65],"9":[32,32]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/authenticate.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/authenticate.ts"],"names":[],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport express, { Router } from 'express';\r\nimport User from './authentication'; // Assuming './authentication' contains the User schema\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst routerUser: Router = express.Router();\r\n\r\n\r\nrouterUser.post('/signup', (req, res, next) => {\r\n    User.find({ email: req.body.email }).exec()\r\n        .then(user => {\r\n            if (user.length >= 1) {\r\n                return res.status(409).json({\r\n                    message: \"Email exists\"\r\n                });\r\n            } else {\r\n                bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n                    if (err) {\r\n                        return res.status(500).json({\r\n                            error: \"Hash could not be created\"\r\n                        });\r\n                    } else {\r\n                        let user: any;\r\n                        if (req.body.email === 'dalidapcm@gmail.com')\r\n                        {\r\n                             user = new User({\r\n                                email: req.body.email,\r\n                                password: hash,\r\n                                permission: ['get', 'post', 'delete', 'patch']\r\n                            });\r\n\r\n                        }\r\n                        else{\r\n                             user = new User({\r\n                                email: req.body.email,\r\n                                password: hash,\r\n                                permission: ['get']\r\n                            });\r\n\r\n                        }\r\n                       \r\n                        user.save()\r\n                            .then( ()=> {\r\n                                res.status(201).json(user);\r\n                            })\r\n                            .catch(() => {\r\n                                res.status(500).json({\r\n                                    error: 'Not created'\r\n                                });\r\n                            });\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            res.status(500).json({\r\n                error: err\r\n            });\r\n        });\r\n});\r\n\r\nrouterUser.post('/login', (req, res) => {\r\n    User.findOne({ email: req.body.email }).exec()\r\n        .then(user => {\r\n            if (!user) {\r\n                return res.status(401).json({\r\n                    message: \"Auth failed\"\r\n                });\r\n            }\r\n            bcrypt.compare(req.body.password, user.password, (err, result) => {\r\n                if (err || !result) {\r\n                    return res.status(401).json({\r\n                        message: \"Auth failed\"\r\n                    });\r\n                }\r\n                const token = jwt.sign({\r\n                    email: user.email,\r\n                    _id: user._id\r\n                }, 'your_secret_key', {\r\n                  //  expiresIn: '1h'\r\n                });\r\n                if (user.email === 'dalidapcm@gmail.com') {\r\n                    return res.status(201).json({\r\n                        message: \"Successful login admin\",\r\n                        yourtoken: token\r\n                    });\r\n                } else {\r\n                    return res.status(201).json({\r\n                        message: \"Auth successful\",\r\n                        yourtoken: token\r\n                    });\r\n                }\r\n            });\r\n        })\r\n        .catch(err => {\r\n            res.status(500).json({\r\n                error: err\r\n            });\r\n        });\r\n});\r\nexport = routerUser;\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1181a70e2f654e6c3b1f80501bbb4294c6d3845a"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\authentication.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\authentication.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":19},"end":{"line":5,"column":55}},"3":{"start":{"line":6,"column":19},"end":{"line":10,"column":20}},"4":{"start":{"line":11,"column":13},"end":{"line":11,"column":57}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"f":{"0":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/authentication.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/authentication.ts"],"names":[],"mappings":";;;;AAAA,wDAAgC;AAGhC,MAAM,UAAU,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAAC;IACnC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC;IACpD,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,UAAU,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAC;CAC5C,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAEpB,MAAM,IAAI,GAAG,kBAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAChD,iBAAS,IAAI,CAAC","sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    email: { type: String, required: true, unique: true},\r\n    password: { type: String, required: true },\r\n    permission: {type: Array, required: true}\r\n}, { strict: true });\r\n\r\n const User = mongoose.model('User', UserSchema);\r\n export = User;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1b302d1306e1445a415ab7a59641b57993a2587d"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\checkauth.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\checkauth.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":23},"end":{"line":15,"column":63}},"16":{"start":{"line":16,"column":25},"end":{"line":16,"column":69}},"17":{"start":{"line":17,"column":0},"end":{"line":17,"column":22}},"18":{"start":{"line":18,"column":18},"end":{"line":44,"column":2}},"19":{"start":{"line":18,"column":38},"end":{"line":44,"column":2}},"20":{"start":{"line":20,"column":4},"end":{"line":43,"column":5}},"21":{"start":{"line":21,"column":22},"end":{"line":21,"column":108}},"22":{"start":{"line":22,"column":24},"end":{"line":22,"column":79}},"23":{"start":{"line":23,"column":8},"end":{"line":23,"column":31}},"24":{"start":{"line":24,"column":19},"end":{"line":24,"column":35}},"25":{"start":{"line":26,"column":21},"end":{"line":26,"column":72}},"26":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"27":{"start":{"line":29,"column":12},"end":{"line":29,"column":69}},"28":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"29":{"start":{"line":33,"column":12},"end":{"line":33,"column":66}},"30":{"start":{"line":36,"column":8},"end":{"line":36,"column":15}},"31":{"start":{"line":39,"column":8},"end":{"line":39,"column":29}},"32":{"start":{"line":40,"column":8},"end":{"line":42,"column":11}},"33":{"start":{"line":45,"column":0},"end":{"line":45,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":18,"column":18},"end":{"line":18,"column":19}},"loc":{"start":{"line":18,"column":38},"end":{"line":44,"column":2}},"line":18},"9":{"name":"(anonymous_9)","decl":{"start":{"line":18,"column":72},"end":{"line":18,"column":73}},"loc":{"start":{"line":18,"column":85},"end":{"line":44,"column":1}},"line":18}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":21,"column":22},"end":{"line":21,"column":108}},"type":"cond-expr","locations":[{"start":{"line":21,"column":83},"end":{"line":21,"column":89}},{"start":{"line":21,"column":92},"end":{"line":21,"column":108}}],"line":21},"9":{"loc":{"start":{"line":21,"column":22},"end":{"line":21,"column":80}},"type":"binary-expr","locations":[{"start":{"line":21,"column":22},"end":{"line":21,"column":63}},{"start":{"line":21,"column":67},"end":{"line":21,"column":80}}],"line":21},"10":{"loc":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},{"start":{"line":28,"column":8},"end":{"line":30,"column":9}}],"line":28},"11":{"loc":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},{"start":{"line":32,"column":8},"end":{"line":34,"column":9}}],"line":32}},"s":{"0":1,"1":23,"2":23,"3":23,"4":23,"5":23,"6":0,"7":0,"8":0,"9":0,"10":46,"11":23,"12":1,"13":2,"14":1,"15":1,"16":1,"17":1,"18":1,"19":23,"20":23,"21":23,"22":23,"23":23,"24":23,"25":23,"26":23,"27":0,"28":23,"29":3,"30":20,"31":0,"32":0,"33":1},"f":{"0":23,"1":23,"2":23,"3":23,"4":23,"5":0,"6":46,"7":2,"8":23,"9":23},"b":{"0":[1,1,1],"1":[0,23],"2":[23,23],"3":[23,23],"4":[23,23],"5":[1,1,1],"6":[0,2],"7":[2,2],"8":[0,23],"9":[23,23],"10":[0,23],"11":[3,20]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/checkauth.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/checkauth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,gEAA+B;AAC/B,sEAAoC;AACpC,sBAAoB;AAOpB,MAAM,SAAS,GAAG,CAAO,GAAyB,EAAE,GAAY,EAAE,IAAiB,EAAE,EAAE;;IACnF,IAAI,CAAC;QACD,MAAM,KAAK,GAAO,MAAA,GAAG,CAAC,OAAO,CAAC,aAAa,0CAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC3D,MAAM,OAAO,GAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;QACzD,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;QACvB,MAAM,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC5B,qDAAqD;QACrD,MAAM,IAAI,GAAG,MAAM,wBAAI,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7C,uBAAuB;QACvB,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;QAC7D,CAAC;QAED,wDAAwD;QACxD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;YACtD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,yDAAyD;QACzD,IAAI,EAAE,CAAC;IACX,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACxB,OAAO,EAAE,sCAAsC;SAClD,CAAC,CAAC;IACP,CAAC;AACL,CAAC,CAAA,CAAC;AACF,kBAAgB,SAAS,CAAC","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport User from './authentication';\r\nimport './mongoose';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\ninterface AuthenticatedRequest extends Request {\r\n    userData?: any; // Define the userData property\r\n}\r\n\r\nconst checkAuth = async (req: AuthenticatedRequest, res:Response, next:NextFunction) => {\r\n    try {\r\n        const token:any = req.headers.authorization?.split(' ')[1];\r\n        const decoded:any = jwt.verify(token, 'your_secret_key');\r\n        req.userData = decoded;\r\n        const id = req.userData._id;\r\n        // Use async/await to wait for the promise to resolve\r\n        const user = await User.findOne({ _id: id });\r\n\r\n        // Check if user exists\r\n        if (!user) {\r\n            return res.status(401).json({ message: 'Unauthorized' });\r\n        }\r\n\r\n        // Check if user has permission for the requested method\r\n        if (!user.permission.includes(req.method.toLowerCase())) {\r\n            return res.status(403).json({ message: 'Forbidden' });\r\n        }\r\n\r\n        // If user has permission, proceed to the next middleware\r\n        next();\r\n    } catch (error) { \r\n        console.error(error);\r\n        return res.status(400).json({\r\n            message: \"Not authorized to perform the action\"\r\n        });\r\n    }\r\n};\r\nexport  default checkAuth;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"23dcc75d5909081a1a8efc19d479908710dcb3ce"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\messages.spec.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\messages.spec.ts","statementMap":{"0":{"start":{"line":7,"column":16},"end":{"line":15,"column":1}},"1":{"start":{"line":8,"column":28},"end":{"line":8,"column":110}},"2":{"start":{"line":8,"column":91},"end":{"line":8,"column":106}},"3":{"start":{"line":9,"column":4},"end":{"line":14,"column":7}},"4":{"start":{"line":10,"column":36},"end":{"line":10,"column":97}},"5":{"start":{"line":10,"column":42},"end":{"line":10,"column":70}},"6":{"start":{"line":10,"column":85},"end":{"line":10,"column":95}},"7":{"start":{"line":11,"column":35},"end":{"line":11,"column":100}},"8":{"start":{"line":11,"column":41},"end":{"line":11,"column":73}},"9":{"start":{"line":11,"column":88},"end":{"line":11,"column":98}},"10":{"start":{"line":12,"column":32},"end":{"line":12,"column":116}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":78}},"12":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"13":{"start":{"line":17,"column":4},"end":{"line":17,"column":62}},"14":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"15":{"start":{"line":182,"column":20},"end":{"line":182,"column":57}},"16":{"start":{"line":183,"column":19},"end":{"line":183,"column":57}},"17":{"start":{"line":184,"column":16},"end":{"line":184,"column":49}},"18":{"start":{"line":185,"column":25},"end":{"line":185,"column":69}},"19":{"start":{"line":186,"column":16},"end":{"line":186,"column":21}},"20":{"start":{"line":187,"column":0},"end":{"line":201,"column":3}},"21":{"start":{"line":188,"column":4},"end":{"line":193,"column":25}},"22":{"start":{"line":188,"column":40},"end":{"line":193,"column":6}},"23":{"start":{"line":189,"column":20},"end":{"line":191,"column":24}},"24":{"start":{"line":194,"column":4},"end":{"line":200,"column":25}},"25":{"start":{"line":194,"column":73},"end":{"line":200,"column":6}},"26":{"start":{"line":195,"column":8},"end":{"line":195,"column":72}},"27":{"start":{"line":196,"column":8},"end":{"line":198,"column":25}},"28":{"start":{"line":202,"column":0},"end":{"line":228,"column":3}},"29":{"start":{"line":203,"column":4},"end":{"line":215,"column":25}},"30":{"start":{"line":203,"column":44},"end":{"line":215,"column":6}},"31":{"start":{"line":204,"column":20},"end":{"line":213,"column":24}},"32":{"start":{"line":216,"column":4},"end":{"line":227,"column":25}},"33":{"start":{"line":216,"column":70},"end":{"line":227,"column":6}},"34":{"start":{"line":217,"column":20},"end":{"line":225,"column":24}},"35":{"start":{"line":230,"column":0},"end":{"line":260,"column":3}},"36":{"start":{"line":232,"column":4},"end":{"line":244,"column":8}},"37":{"start":{"line":232,"column":17},"end":{"line":244,"column":6}},"38":{"start":{"line":233,"column":25},"end":{"line":242,"column":24}},"39":{"start":{"line":243,"column":8},"end":{"line":243,"column":38}},"40":{"start":{"line":245,"column":4},"end":{"line":249,"column":25}},"41":{"start":{"line":245,"column":50},"end":{"line":249,"column":6}},"42":{"start":{"line":246,"column":8},"end":{"line":248,"column":25}},"43":{"start":{"line":250,"column":4},"end":{"line":254,"column":25}},"44":{"start":{"line":250,"column":63},"end":{"line":254,"column":6}},"45":{"start":{"line":251,"column":8},"end":{"line":253,"column":25}},"46":{"start":{"line":255,"column":4},"end":{"line":259,"column":25}},"47":{"start":{"line":255,"column":43},"end":{"line":259,"column":6}},"48":{"start":{"line":256,"column":8},"end":{"line":258,"column":25}},"49":{"start":{"line":261,"column":0},"end":{"line":286,"column":3}},"50":{"start":{"line":263,"column":4},"end":{"line":275,"column":8}},"51":{"start":{"line":263,"column":17},"end":{"line":275,"column":6}},"52":{"start":{"line":264,"column":25},"end":{"line":273,"column":24}},"53":{"start":{"line":274,"column":8},"end":{"line":274,"column":38}},"54":{"start":{"line":276,"column":4},"end":{"line":280,"column":8}},"55":{"start":{"line":276,"column":53},"end":{"line":280,"column":6}},"56":{"start":{"line":277,"column":8},"end":{"line":279,"column":25}},"57":{"start":{"line":281,"column":4},"end":{"line":285,"column":8}},"58":{"start":{"line":281,"column":63},"end":{"line":285,"column":6}},"59":{"start":{"line":282,"column":8},"end":{"line":284,"column":25}},"60":{"start":{"line":287,"column":0},"end":{"line":319,"column":3}},"61":{"start":{"line":289,"column":4},"end":{"line":301,"column":8}},"62":{"start":{"line":289,"column":17},"end":{"line":301,"column":6}},"63":{"start":{"line":290,"column":25},"end":{"line":299,"column":24}},"64":{"start":{"line":300,"column":8},"end":{"line":300,"column":38}},"65":{"start":{"line":302,"column":4},"end":{"line":313,"column":25}},"66":{"start":{"line":302,"column":50},"end":{"line":313,"column":6}},"67":{"start":{"line":303,"column":8},"end":{"line":312,"column":25}},"68":{"start":{"line":314,"column":4},"end":{"line":318,"column":25}},"69":{"start":{"line":314,"column":63},"end":{"line":318,"column":6}},"70":{"start":{"line":315,"column":8},"end":{"line":317,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":44},"end":{"line":7,"column":45}},"loc":{"start":{"line":7,"column":89},"end":{"line":15,"column":1}},"line":7},"1":{"name":"adopt","decl":{"start":{"line":8,"column":13},"end":{"line":8,"column":18}},"loc":{"start":{"line":8,"column":26},"end":{"line":8,"column":112}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":70},"end":{"line":8,"column":71}},"loc":{"start":{"line":8,"column":89},"end":{"line":8,"column":108}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":36},"end":{"line":9,"column":37}},"loc":{"start":{"line":9,"column":63},"end":{"line":14,"column":5}},"line":9},"4":{"name":"fulfilled","decl":{"start":{"line":10,"column":17},"end":{"line":10,"column":26}},"loc":{"start":{"line":10,"column":34},"end":{"line":10,"column":99}},"line":10},"5":{"name":"rejected","decl":{"start":{"line":11,"column":17},"end":{"line":11,"column":25}},"loc":{"start":{"line":11,"column":33},"end":{"line":11,"column":102}},"line":11},"6":{"name":"step","decl":{"start":{"line":12,"column":17},"end":{"line":12,"column":21}},"loc":{"start":{"line":12,"column":30},"end":{"line":12,"column":118}},"line":12},"7":{"name":"(anonymous_7)","decl":{"start":{"line":16,"column":56},"end":{"line":16,"column":57}},"loc":{"start":{"line":16,"column":71},"end":{"line":18,"column":1}},"line":16},"8":{"name":"(anonymous_8)","decl":{"start":{"line":187,"column":26},"end":{"line":187,"column":27}},"loc":{"start":{"line":187,"column":32},"end":{"line":201,"column":1}},"line":187},"9":{"name":"(anonymous_9)","decl":{"start":{"line":188,"column":34},"end":{"line":188,"column":35}},"loc":{"start":{"line":188,"column":40},"end":{"line":193,"column":6}},"line":188},"10":{"name":"(anonymous_10)","decl":{"start":{"line":188,"column":74},"end":{"line":188,"column":75}},"loc":{"start":{"line":188,"column":87},"end":{"line":193,"column":5}},"line":188},"11":{"name":"(anonymous_11)","decl":{"start":{"line":194,"column":67},"end":{"line":194,"column":68}},"loc":{"start":{"line":194,"column":73},"end":{"line":200,"column":6}},"line":194},"12":{"name":"(anonymous_12)","decl":{"start":{"line":194,"column":107},"end":{"line":194,"column":108}},"loc":{"start":{"line":194,"column":120},"end":{"line":200,"column":5}},"line":194},"13":{"name":"(anonymous_13)","decl":{"start":{"line":202,"column":27},"end":{"line":202,"column":28}},"loc":{"start":{"line":202,"column":33},"end":{"line":228,"column":1}},"line":202},"14":{"name":"(anonymous_14)","decl":{"start":{"line":203,"column":38},"end":{"line":203,"column":39}},"loc":{"start":{"line":203,"column":44},"end":{"line":215,"column":6}},"line":203},"15":{"name":"(anonymous_15)","decl":{"start":{"line":203,"column":78},"end":{"line":203,"column":79}},"loc":{"start":{"line":203,"column":91},"end":{"line":215,"column":5}},"line":203},"16":{"name":"(anonymous_16)","decl":{"start":{"line":216,"column":64},"end":{"line":216,"column":65}},"loc":{"start":{"line":216,"column":70},"end":{"line":227,"column":6}},"line":216},"17":{"name":"(anonymous_17)","decl":{"start":{"line":216,"column":104},"end":{"line":216,"column":105}},"loc":{"start":{"line":216,"column":117},"end":{"line":227,"column":5}},"line":216},"18":{"name":"(anonymous_18)","decl":{"start":{"line":230,"column":33},"end":{"line":230,"column":34}},"loc":{"start":{"line":230,"column":39},"end":{"line":260,"column":1}},"line":230},"19":{"name":"(anonymous_19)","decl":{"start":{"line":232,"column":11},"end":{"line":232,"column":12}},"loc":{"start":{"line":232,"column":17},"end":{"line":244,"column":6}},"line":232},"20":{"name":"(anonymous_20)","decl":{"start":{"line":232,"column":51},"end":{"line":232,"column":52}},"loc":{"start":{"line":232,"column":64},"end":{"line":244,"column":5}},"line":232},"21":{"name":"(anonymous_21)","decl":{"start":{"line":245,"column":44},"end":{"line":245,"column":45}},"loc":{"start":{"line":245,"column":50},"end":{"line":249,"column":6}},"line":245},"22":{"name":"(anonymous_22)","decl":{"start":{"line":245,"column":84},"end":{"line":245,"column":85}},"loc":{"start":{"line":245,"column":97},"end":{"line":249,"column":5}},"line":245},"23":{"name":"(anonymous_23)","decl":{"start":{"line":250,"column":57},"end":{"line":250,"column":58}},"loc":{"start":{"line":250,"column":63},"end":{"line":254,"column":6}},"line":250},"24":{"name":"(anonymous_24)","decl":{"start":{"line":250,"column":97},"end":{"line":250,"column":98}},"loc":{"start":{"line":250,"column":110},"end":{"line":254,"column":5}},"line":250},"25":{"name":"(anonymous_25)","decl":{"start":{"line":255,"column":37},"end":{"line":255,"column":38}},"loc":{"start":{"line":255,"column":43},"end":{"line":259,"column":6}},"line":255},"26":{"name":"(anonymous_26)","decl":{"start":{"line":255,"column":77},"end":{"line":255,"column":78}},"loc":{"start":{"line":255,"column":90},"end":{"line":259,"column":5}},"line":255},"27":{"name":"(anonymous_27)","decl":{"start":{"line":261,"column":30},"end":{"line":261,"column":31}},"loc":{"start":{"line":261,"column":36},"end":{"line":286,"column":1}},"line":261},"28":{"name":"(anonymous_28)","decl":{"start":{"line":263,"column":11},"end":{"line":263,"column":12}},"loc":{"start":{"line":263,"column":17},"end":{"line":275,"column":6}},"line":263},"29":{"name":"(anonymous_29)","decl":{"start":{"line":263,"column":51},"end":{"line":263,"column":52}},"loc":{"start":{"line":263,"column":64},"end":{"line":275,"column":5}},"line":263},"30":{"name":"(anonymous_30)","decl":{"start":{"line":276,"column":47},"end":{"line":276,"column":48}},"loc":{"start":{"line":276,"column":53},"end":{"line":280,"column":6}},"line":276},"31":{"name":"(anonymous_31)","decl":{"start":{"line":276,"column":87},"end":{"line":276,"column":88}},"loc":{"start":{"line":276,"column":100},"end":{"line":280,"column":5}},"line":276},"32":{"name":"(anonymous_32)","decl":{"start":{"line":281,"column":57},"end":{"line":281,"column":58}},"loc":{"start":{"line":281,"column":63},"end":{"line":285,"column":6}},"line":281},"33":{"name":"(anonymous_33)","decl":{"start":{"line":281,"column":97},"end":{"line":281,"column":98}},"loc":{"start":{"line":281,"column":110},"end":{"line":285,"column":5}},"line":281},"34":{"name":"(anonymous_34)","decl":{"start":{"line":287,"column":32},"end":{"line":287,"column":33}},"loc":{"start":{"line":287,"column":38},"end":{"line":319,"column":1}},"line":287},"35":{"name":"(anonymous_35)","decl":{"start":{"line":289,"column":11},"end":{"line":289,"column":12}},"loc":{"start":{"line":289,"column":17},"end":{"line":301,"column":6}},"line":289},"36":{"name":"(anonymous_36)","decl":{"start":{"line":289,"column":51},"end":{"line":289,"column":52}},"loc":{"start":{"line":289,"column":64},"end":{"line":301,"column":5}},"line":289},"37":{"name":"(anonymous_37)","decl":{"start":{"line":302,"column":44},"end":{"line":302,"column":45}},"loc":{"start":{"line":302,"column":50},"end":{"line":313,"column":6}},"line":302},"38":{"name":"(anonymous_38)","decl":{"start":{"line":302,"column":84},"end":{"line":302,"column":85}},"loc":{"start":{"line":302,"column":97},"end":{"line":313,"column":5}},"line":302},"39":{"name":"(anonymous_39)","decl":{"start":{"line":314,"column":57},"end":{"line":314,"column":58}},"loc":{"start":{"line":314,"column":63},"end":{"line":318,"column":6}},"line":314},"40":{"name":"(anonymous_40)","decl":{"start":{"line":314,"column":97},"end":{"line":314,"column":98}},"loc":{"start":{"line":314,"column":110},"end":{"line":318,"column":5}},"line":314}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":16},"end":{"line":15,"column":1}},"type":"binary-expr","locations":[{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},{"start":{"line":7,"column":25},"end":{"line":7,"column":39}},{"start":{"line":7,"column":44},"end":{"line":15,"column":1}}],"line":7},"1":{"loc":{"start":{"line":8,"column":35},"end":{"line":8,"column":109}},"type":"cond-expr","locations":[{"start":{"line":8,"column":56},"end":{"line":8,"column":61}},{"start":{"line":8,"column":64},"end":{"line":8,"column":109}}],"line":8},"2":{"loc":{"start":{"line":9,"column":16},"end":{"line":9,"column":34}},"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":17}},{"start":{"line":9,"column":22},"end":{"line":9,"column":33}}],"line":9},"3":{"loc":{"start":{"line":12,"column":32},"end":{"line":12,"column":115}},"type":"cond-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":67}},{"start":{"line":12,"column":70},"end":{"line":12,"column":115}}],"line":12},"4":{"loc":{"start":{"line":13,"column":51},"end":{"line":13,"column":67}},"type":"binary-expr","locations":[{"start":{"line":13,"column":51},"end":{"line":13,"column":61}},{"start":{"line":13,"column":65},"end":{"line":13,"column":67}}],"line":13},"5":{"loc":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"type":"binary-expr","locations":[{"start":{"line":16,"column":23},"end":{"line":16,"column":27}},{"start":{"line":16,"column":31},"end":{"line":16,"column":51}},{"start":{"line":16,"column":56},"end":{"line":18,"column":1}}],"line":16},"6":{"loc":{"start":{"line":17,"column":11},"end":{"line":17,"column":61}},"type":"cond-expr","locations":[{"start":{"line":17,"column":37},"end":{"line":17,"column":40}},{"start":{"line":17,"column":43},"end":{"line":17,"column":61}}],"line":17},"7":{"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":33}},"type":"binary-expr","locations":[{"start":{"line":17,"column":12},"end":{"line":17,"column":15}},{"start":{"line":17,"column":19},"end":{"line":17,"column":33}}],"line":17}},"s":{"0":1,"1":14,"2":14,"3":14,"4":14,"5":14,"6":0,"7":0,"8":0,"9":0,"10":28,"11":14,"12":1,"13":4,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"f":{"0":14,"1":14,"2":14,"3":14,"4":14,"5":0,"6":28,"7":4,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"b":{"0":[1,1,1],"1":[0,14],"2":[14,14],"3":[14,14],"4":[14,14],"5":[1,1,1],"6":[1,3],"7":[4,4]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/messages.spec.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/messages.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// import request from 'supertest';\r\n// import app from './database';\r\n// import {expect} from 'chai';\r\n// import sinon from 'sinon';\r\n// import Message from './schemamessages'\r\n\r\n\r\n\r\n// // Mount the messages router on the test instance\r\n// //app.use('/messages', messagesRouter);\r\n\r\n// describe('GET /messages', () =>{\r\n//     it(\"getting all the messages\", (done) => {\r\n//         request(app)\r\n//         .get('/messages')\r\n//         .expect(200)\r\n\r\n//         .end((err: Error, res: request.Response) => {\r\n//             console.log(res.body);\r\n//             if (err) {\r\n//                 console.error(err);\r\n//                 return done(err);\r\n//             }\r\n//             done();\r\n//         });\r\n\r\n        \r\n//     });\r\n    \r\n//     it('should return \"Internal Server Error\" if an error occurs', async () => {\r\n//         try {\r\n         \r\n//             sinon.stub(Message, 'find').throws();\r\n\r\n//           await request(app)\r\n//                 .get('/')            \r\n//             // Assert that the response status code is 500\r\n//             .expect(500);\r\n\r\n//             // Add more assertions as needed\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n \r\n// }\r\n// );\r\n// describe('POST /messages', () => {\r\n//     it('should create a new message', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/messages')\r\n//                 .send({\r\n//                     firstname: \"Lion\",\r\n//                     lastname: \"lendfjkd\",\r\n//                     email: \"df@gmail.com\",\r\n//                     subject: \"why\",\r\n//                     description: \"fjkf\"\r\n//                 })\r\n//                 .expect(201);\r\n//             console.log('message created:', response.body);\r\n//         } \r\n        \r\n//         catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     })\r\n//     ;\r\n//     it('should not create a new message', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/messages')\r\n//                 .send({\r\n//                     lastname: \"lendfjkd\",\r\n//                     email: \"df@gmail.com\",\r\n//                     subject: \"why\",\r\n//                     description: \"fjkf\"\r\n//                 })\r\n//                 .expect(500);\r\n//             console.log('message created:', response.body);\r\n//         } \r\n        \r\n//         catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     })\r\n// });\r\n\r\n// let blogId : string;\r\n\r\n// describe('DELETE /messages/:id', () => {\r\n//     before(async () => {\r\n//         const response = await request(app)\r\n//             .post('/messages')\r\n//             .send({\r\n//                 firstname: \"Lion\",\r\n//                 email: \"irumvaleon@gmail.com\",\r\n//                 lastname: \"leon\",\r\n//                 subject: \"why \",\r\n//                 description: \"fjkf\"\r\n//             })\r\n//             .expect(201);\r\n//         blogId = response.body._id;\r\n//         console.log(blogId);\r\n//     });\r\n\r\n//     it('should delete an existing blog', async () => {\r\n//         await request(app)\r\n//             .delete(`/messages/${blogId}`)\r\n//             .expect(200);\r\n//     });\r\n\r\n//     it('should return 400 if the message id is invalid', async () => {\r\n//         await request(app)\r\n//             .delete('/messages/invalidId')\r\n//             .expect(500);\r\n//     });\r\n\r\n//     it('should delete all the blogs', async () => {\r\n//         await request(app)\r\n//             .delete('/messages/deleteall')\r\n//             .expect(200);\r\n//     });\r\n// });\r\n\r\n// describe('GET /messages/:id', () => {\r\n//     before(async () => {\r\n//         const response = await request(app)\r\n//             .post('/messages')\r\n//             .send({\r\n//                 firstname: \"Lion\",\r\n//                 email: \"irumvaleon@gmail.com\",\r\n//                 lastname: \"leon\",\r\n//                 subject: \"why \",\r\n//                 description: \"fjkf\"\r\n//             })\r\n//             .expect(201);\r\n//         blogId = response.body._id;\r\n//         console.log(blogId);\r\n//     });\r\n\r\n//     it('should get an existing messages', async () => {\r\n//         await request(app)\r\n//             .get(`/messages/${blogId}`)\r\n//             .expect(200);\r\n//     });\r\n\r\n//     it('should return 400 if the blog id is invalid', async () => {\r\n//         await request(app)\r\n//             .get('/messages/invalidId')\r\n//             .expect(500);\r\n//     });\r\n// });\r\n\r\n// describe('PATCH /messages/:id', () => {\r\n//     before(async () => {\r\n//         const response = await request(app)\r\n//             .post('/messages')\r\n//             .send({\r\n//                 firstname: \"Lion\",\r\n//                 email: \"irumvaleon@gmail.com\",\r\n//                 lastname: \"leon\",\r\n//                 subject: \"why \",\r\n//                 description: \"fjkf\"\r\n//             })\r\n//             .expect(201);\r\n//         blogId = response.body._id;\r\n//         console.log(blogId);\r\n//     });\r\n\r\n//     it('should update an existing message', async () => {\r\n//         await request(app)\r\n//             .patch(`/messages/${blogId}`)\r\n//             .send({\r\n//                 firstname: \" updated Lion\",\r\n//                 email: \"irumvaleon@gmail.com\",\r\n//                 lastname: \"updated leon\",\r\n//                 subject: \" updated why \",\r\n//                 description: \" updated fjkf\"\r\n//             })\r\n//             .expect(200);\r\n//     });\r\n\r\n//     it('should return 400 if the message id is invalid', async () => {\r\n//         await request(app)\r\n//             .patch('/messages/invalidId')\r\n//             .expect(500);\r\n//     });\r\n// });\r\nimport request from 'supertest';\r\nimport app from './database';\r\nimport { expect } from 'chai';\r\nimport sinon from 'sinon';\r\nimport Message from './schemamessages';\r\nconst timeout = 20000;\r\n\r\ndescribe('GET /messages', () => {\r\n    \r\n    it(\"should get all messages\", async () => {\r\n        const res = await request(app)\r\n            .get('/messages')\r\n            .expect(200);\r\n\r\n        // Add more assertions as needed\r\n    }).timeout(timeout);\r\n\r\n    it('should return \"Internal Server Error\" if an error occurs', async () => {\r\n        sinon.stub(Message, 'find').throws();\r\n\r\n        await request(app)\r\n            .get('/')\r\n            .expect(404);\r\n\r\n        // Add more assertions as needed\r\n    }).timeout(timeout);\r\n})\r\n\r\ndescribe('POST /messages', () => {\r\n    it('should create a new message', async () => {\r\n        const res = await request(app)\r\n            .post('/messages')\r\n            .send({\r\n                firstname: \"Lion\",\r\n                lastname: \"lendfjkd\",\r\n                email: \"df@gmail.com\",\r\n                subject: \"why\",\r\n                description: \"fjkf\"\r\n            })\r\n            .expect(201);\r\n\r\n        // Add more assertions as needed\r\n    }).timeout(timeout);\r\n\r\n    it('should not create a new message if data is incomplete', async () => {\r\n        const res = await request(app)\r\n            .post('/messages')\r\n            .send({\r\n                lastname: \"lendfjkd\",\r\n                email: \"df@gmail.com\",\r\n                subject: \"why\",\r\n                description: \"fjkf\"\r\n            })\r\n            .expect(400);\r\n\r\n        // Add more assertions as needed\r\n    }).timeout(timeout);\r\n   \r\n });\r\n\r\n// // Other test suites for DELETE, GET by ID, PATCH methods follow the same pattern\r\ndescribe('DELETE /messages/:id', () => {\r\n    let messageId: string;\r\n\r\n    before(async () => {\r\n        const response = await request(app)\r\n            .post('/messages')\r\n            .send({\r\n                firstname: \"Lion\",\r\n                email: \"irumvaleon@gmail.com\",\r\n                lastname: \"leon\",\r\n                subject: \"why\",\r\n                description: \"fjkf\"\r\n            })\r\n            .expect(201);\r\n        messageId = response.body._id;\r\n    });\r\n\r\n    it('should delete an existing message', async () => {\r\n        await request(app)\r\n            .delete(`/messages/${messageId}`)\r\n            .expect(200);\r\n    }).timeout(timeout);\r\n\r\n    it('should return 400 if the message id is invalid', async () => {\r\n        await request(app)\r\n            .delete('/messages/invalidId')\r\n            .expect(500);\r\n    }).timeout(timeout);\r\n\r\n    it('should delete all messages', async () => {\r\n        await request(app)\r\n            .delete('/messages/deleteall')\r\n            .expect(200);\r\n    }).timeout(timeout);\r\n});\r\n\r\ndescribe('GET /messages/:id', () => {\r\n    let messageId: string;\r\n\r\n    before(async () => {\r\n        const response = await request(app)\r\n            .post('/messages')\r\n            .send({\r\n                firstname: \"Lion\",\r\n                email: \"irumvaleon@gmail.com\",\r\n                lastname: \"leon\",\r\n                subject: \"why\",\r\n                description: \"fjkf\"\r\n            })\r\n            .expect(201);\r\n        messageId = response.body._id;\r\n    });\r\n\r\n    it('should get an existing message by ID', async () => {\r\n        await request(app)\r\n            .get(`/messages/${messageId}`)\r\n            .expect(200);\r\n    });\r\n\r\n    it('should return 400 if the message id is invalid', async () => {\r\n        await request(app)\r\n            .get('/messages/invalidId')\r\n            .expect(500);\r\n    });\r\n});\r\n\r\ndescribe('PATCH /messages/:id', () => {\r\n    let messageId: string;\r\n\r\n    before(async () => {\r\n        const response = await request(app)\r\n            .post('/messages')\r\n            .send({\r\n                firstname: \"Lion\",\r\n                email: \"irumvaleon@gmail.com\",\r\n                lastname: \"leon\",\r\n                subject: \"why\",\r\n                description: \"fjkf\"\r\n            })\r\n            .expect(201);\r\n        messageId = response.body._id;\r\n    });\r\n\r\n    it('should update an existing message', async () => {\r\n        await request(app)\r\n            .patch(`/messages/${messageId}`)\r\n            .send({\r\n                firstname: \"Updated Lion\",\r\n                lastname: \"Updated Leon\",\r\n                email: \"updatedirumvaleon@gmail.com\",\r\n                subject: \"Updated why\",\r\n                description: \"Updated fjkf\"\r\n            })\r\n            .expect(200);\r\n    }).timeout(timeout);\r\n\r\n    it('should return 400 if the message id is invalid', async () => {\r\n        await request(app)\r\n            .patch('/messages/invalidId')\r\n            .expect(500);\r\n    }).timeout(timeout);\r\n});\r\n\r\n\r\n\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"11f35f719c7b40d1ca6346074559bee329302043"},"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\user.spec.ts":{"path":"C:\\Users\\LEON\\Documents\\htmlfiles\\backend\\user.spec.ts","statementMap":{"0":{"start":{"line":7,"column":16},"end":{"line":15,"column":1}},"1":{"start":{"line":8,"column":28},"end":{"line":8,"column":110}},"2":{"start":{"line":8,"column":91},"end":{"line":8,"column":106}},"3":{"start":{"line":9,"column":4},"end":{"line":14,"column":7}},"4":{"start":{"line":10,"column":36},"end":{"line":10,"column":97}},"5":{"start":{"line":10,"column":42},"end":{"line":10,"column":70}},"6":{"start":{"line":10,"column":85},"end":{"line":10,"column":95}},"7":{"start":{"line":11,"column":35},"end":{"line":11,"column":100}},"8":{"start":{"line":11,"column":41},"end":{"line":11,"column":73}},"9":{"start":{"line":11,"column":88},"end":{"line":11,"column":98}},"10":{"start":{"line":12,"column":32},"end":{"line":12,"column":116}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":78}},"12":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"13":{"start":{"line":17,"column":4},"end":{"line":17,"column":62}},"14":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"15":{"start":{"line":187,"column":0},"end":{"line":219,"column":3}},"16":{"start":{"line":188,"column":20},"end":{"line":188,"column":25}},"17":{"start":{"line":189,"column":4},"end":{"line":201,"column":25}},"18":{"start":{"line":189,"column":64},"end":{"line":201,"column":6}},"19":{"start":{"line":190,"column":21},"end":{"line":190,"column":39}},"20":{"start":{"line":191,"column":25},"end":{"line":197,"column":24}},"21":{"start":{"line":198,"column":8},"end":{"line":200,"column":11}},"22":{"start":{"line":199,"column":12},"end":{"line":199,"column":81}},"23":{"start":{"line":202,"column":4},"end":{"line":210,"column":25}},"24":{"start":{"line":202,"column":62},"end":{"line":210,"column":6}},"25":{"start":{"line":203,"column":8},"end":{"line":209,"column":25}},"26":{"start":{"line":211,"column":4},"end":{"line":218,"column":25}},"27":{"start":{"line":211,"column":57},"end":{"line":218,"column":6}},"28":{"start":{"line":212,"column":8},"end":{"line":217,"column":25}},"29":{"start":{"line":220,"column":20},"end":{"line":220,"column":57}},"30":{"start":{"line":221,"column":19},"end":{"line":221,"column":57}},"31":{"start":{"line":222,"column":17},"end":{"line":222,"column":51}},"32":{"start":{"line":223,"column":17},"end":{"line":223,"column":51}},"33":{"start":{"line":224,"column":0},"end":{"line":267,"column":3}},"34":{"start":{"line":230,"column":20},"end":{"line":230,"column":25}},"35":{"start":{"line":231,"column":4},"end":{"line":239,"column":25}},"36":{"start":{"line":231,"column":59},"end":{"line":239,"column":6}},"37":{"start":{"line":232,"column":8},"end":{"line":238,"column":25}},"38":{"start":{"line":240,"column":4},"end":{"line":248,"column":25}},"39":{"start":{"line":240,"column":57},"end":{"line":248,"column":6}},"40":{"start":{"line":241,"column":8},"end":{"line":247,"column":25}},"41":{"start":{"line":249,"column":4},"end":{"line":257,"column":25}},"42":{"start":{"line":249,"column":59},"end":{"line":257,"column":6}},"43":{"start":{"line":250,"column":8},"end":{"line":256,"column":25}},"44":{"start":{"line":258,"column":4},"end":{"line":266,"column":25}},"45":{"start":{"line":258,"column":55},"end":{"line":266,"column":6}},"46":{"start":{"line":259,"column":8},"end":{"line":265,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":44},"end":{"line":7,"column":45}},"loc":{"start":{"line":7,"column":89},"end":{"line":15,"column":1}},"line":7},"1":{"name":"adopt","decl":{"start":{"line":8,"column":13},"end":{"line":8,"column":18}},"loc":{"start":{"line":8,"column":26},"end":{"line":8,"column":112}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":70},"end":{"line":8,"column":71}},"loc":{"start":{"line":8,"column":89},"end":{"line":8,"column":108}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":36},"end":{"line":9,"column":37}},"loc":{"start":{"line":9,"column":63},"end":{"line":14,"column":5}},"line":9},"4":{"name":"fulfilled","decl":{"start":{"line":10,"column":17},"end":{"line":10,"column":26}},"loc":{"start":{"line":10,"column":34},"end":{"line":10,"column":99}},"line":10},"5":{"name":"rejected","decl":{"start":{"line":11,"column":17},"end":{"line":11,"column":25}},"loc":{"start":{"line":11,"column":33},"end":{"line":11,"column":102}},"line":11},"6":{"name":"step","decl":{"start":{"line":12,"column":17},"end":{"line":12,"column":21}},"loc":{"start":{"line":12,"column":30},"end":{"line":12,"column":118}},"line":12},"7":{"name":"(anonymous_7)","decl":{"start":{"line":16,"column":56},"end":{"line":16,"column":57}},"loc":{"start":{"line":16,"column":71},"end":{"line":18,"column":1}},"line":16},"8":{"name":"(anonymous_8)","decl":{"start":{"line":187,"column":30},"end":{"line":187,"column":31}},"loc":{"start":{"line":187,"column":36},"end":{"line":219,"column":1}},"line":187},"9":{"name":"(anonymous_9)","decl":{"start":{"line":189,"column":58},"end":{"line":189,"column":59}},"loc":{"start":{"line":189,"column":64},"end":{"line":201,"column":6}},"line":189},"10":{"name":"(anonymous_10)","decl":{"start":{"line":189,"column":98},"end":{"line":189,"column":99}},"loc":{"start":{"line":189,"column":111},"end":{"line":201,"column":5}},"line":189},"11":{"name":"(anonymous_11)","decl":{"start":{"line":198,"column":67},"end":{"line":198,"column":68}},"loc":{"start":{"line":198,"column":84},"end":{"line":200,"column":9}},"line":198},"12":{"name":"(anonymous_12)","decl":{"start":{"line":202,"column":56},"end":{"line":202,"column":57}},"loc":{"start":{"line":202,"column":62},"end":{"line":210,"column":6}},"line":202},"13":{"name":"(anonymous_13)","decl":{"start":{"line":202,"column":96},"end":{"line":202,"column":97}},"loc":{"start":{"line":202,"column":109},"end":{"line":210,"column":5}},"line":202},"14":{"name":"(anonymous_14)","decl":{"start":{"line":211,"column":51},"end":{"line":211,"column":52}},"loc":{"start":{"line":211,"column":57},"end":{"line":218,"column":6}},"line":211},"15":{"name":"(anonymous_15)","decl":{"start":{"line":211,"column":91},"end":{"line":211,"column":92}},"loc":{"start":{"line":211,"column":104},"end":{"line":218,"column":5}},"line":211},"16":{"name":"(anonymous_16)","decl":{"start":{"line":224,"column":29},"end":{"line":224,"column":30}},"loc":{"start":{"line":224,"column":35},"end":{"line":267,"column":1}},"line":224},"17":{"name":"(anonymous_17)","decl":{"start":{"line":231,"column":53},"end":{"line":231,"column":54}},"loc":{"start":{"line":231,"column":59},"end":{"line":239,"column":6}},"line":231},"18":{"name":"(anonymous_18)","decl":{"start":{"line":231,"column":93},"end":{"line":231,"column":94}},"loc":{"start":{"line":231,"column":106},"end":{"line":239,"column":5}},"line":231},"19":{"name":"(anonymous_19)","decl":{"start":{"line":240,"column":51},"end":{"line":240,"column":52}},"loc":{"start":{"line":240,"column":57},"end":{"line":248,"column":6}},"line":240},"20":{"name":"(anonymous_20)","decl":{"start":{"line":240,"column":91},"end":{"line":240,"column":92}},"loc":{"start":{"line":240,"column":104},"end":{"line":248,"column":5}},"line":240},"21":{"name":"(anonymous_21)","decl":{"start":{"line":249,"column":53},"end":{"line":249,"column":54}},"loc":{"start":{"line":249,"column":59},"end":{"line":257,"column":6}},"line":249},"22":{"name":"(anonymous_22)","decl":{"start":{"line":249,"column":93},"end":{"line":249,"column":94}},"loc":{"start":{"line":249,"column":106},"end":{"line":257,"column":5}},"line":249},"23":{"name":"(anonymous_23)","decl":{"start":{"line":258,"column":49},"end":{"line":258,"column":50}},"loc":{"start":{"line":258,"column":55},"end":{"line":266,"column":6}},"line":258},"24":{"name":"(anonymous_24)","decl":{"start":{"line":258,"column":89},"end":{"line":258,"column":90}},"loc":{"start":{"line":258,"column":102},"end":{"line":266,"column":5}},"line":258}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":16},"end":{"line":15,"column":1}},"type":"binary-expr","locations":[{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},{"start":{"line":7,"column":25},"end":{"line":7,"column":39}},{"start":{"line":7,"column":44},"end":{"line":15,"column":1}}],"line":7},"1":{"loc":{"start":{"line":8,"column":35},"end":{"line":8,"column":109}},"type":"cond-expr","locations":[{"start":{"line":8,"column":56},"end":{"line":8,"column":61}},{"start":{"line":8,"column":64},"end":{"line":8,"column":109}}],"line":8},"2":{"loc":{"start":{"line":9,"column":16},"end":{"line":9,"column":34}},"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":17}},{"start":{"line":9,"column":22},"end":{"line":9,"column":33}}],"line":9},"3":{"loc":{"start":{"line":12,"column":32},"end":{"line":12,"column":115}},"type":"cond-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":67}},{"start":{"line":12,"column":70},"end":{"line":12,"column":115}}],"line":12},"4":{"loc":{"start":{"line":13,"column":51},"end":{"line":13,"column":67}},"type":"binary-expr","locations":[{"start":{"line":13,"column":51},"end":{"line":13,"column":61}},{"start":{"line":13,"column":65},"end":{"line":13,"column":67}}],"line":13},"5":{"loc":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"type":"binary-expr","locations":[{"start":{"line":16,"column":23},"end":{"line":16,"column":27}},{"start":{"line":16,"column":31},"end":{"line":16,"column":51}},{"start":{"line":16,"column":56},"end":{"line":18,"column":1}}],"line":16},"6":{"loc":{"start":{"line":17,"column":11},"end":{"line":17,"column":61}},"type":"cond-expr","locations":[{"start":{"line":17,"column":37},"end":{"line":17,"column":40}},{"start":{"line":17,"column":43},"end":{"line":17,"column":61}}],"line":17},"7":{"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":33}},"type":"binary-expr","locations":[{"start":{"line":17,"column":12},"end":{"line":17,"column":15}},{"start":{"line":17,"column":19},"end":{"line":17,"column":33}}],"line":17}},"s":{"0":1,"1":7,"2":7,"3":7,"4":6,"5":6,"6":0,"7":1,"8":1,"9":1,"10":13,"11":7,"12":1,"13":4,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":0,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1},"f":{"0":7,"1":7,"2":7,"3":7,"4":6,"5":1,"6":13,"7":4,"8":1,"9":1,"10":1,"11":0,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"b":{"0":[1,1,1],"1":[0,7],"2":[7,7],"3":[6,7],"4":[7,7],"5":[1,1,1],"6":[1,3],"7":[4,4]},"inputSourceMap":{"version":3,"file":"C:/Users/LEON/Documents/htmlfiles/backend/user.spec.ts","sources":["C:/Users/LEON/Documents/htmlfiles/backend/user.spec.ts"],"names":[],"mappings":";AAAA,mCAAmC;AACnC,gCAAgC;AAChC,+BAA+B;AAC/B,+BAA+B;AAC/B,iCAAiC;;;;;;;;;;;;;;AAEjC,uCAAuC;AACvC,4CAA4C;AAC5C,gBAAgB;AAChB,kDAAkD;AAClD,uCAAuC;AACvC,0BAA0B;AAC1B,wCAAwC;AACxC,qBAAqB;AACrB,gCAAgC;AAChC,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,4CAA4C;AAC5C,gBAAgB;AAChB,kDAAkD;AAClD,uCAAuC;AACvC,0BAA0B;AAC1B,mDAAmD;AACnD,wCAAwC;AACxC,qBAAqB;AACrB,gCAAgC;AAChC,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,4CAA4C;AAC5C,gBAAgB;AAChB,kDAAkD;AAClD,uCAAuC;AACvC,0BAA0B;AAC1B,8CAA8C;AAC9C,wCAAwC;AACxC,qBAAqB;AACrB,gCAAgC;AAChC,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,iDAAiD;AACjD,gBAAgB;AAChB,kDAAkD;AAClD,uCAAuC;AACvC,0BAA0B;AAC1B,mDAAmD;AACnD,sCAAsC;AACtC,qBAAqB;AACrB,gCAAgC;AAChC,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,4CAA4C;AAC5C,gBAAgB;AAChB,kDAAkD;AAClD,uCAAuC;AACvC,0BAA0B;AAC1B,oDAAoD;AACpD,wCAAwC;AACxC,qBAAqB;AACrB,gCAAgC;AAChC,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AAGV,OAAO;AAEP,wCAAwC;AACxC,sDAAsD;AACtD,gBAAgB;AAChB,4DAA4D;AAC5D,kDAAkD;AAClD,wCAAwC;AACxC,0BAA0B;AAC1B,kCAAkC;AAClC,wCAAwC;AACxC,qBAAqB;AACrB,gCAAgC;AAChC,sFAAsF;AACtF,kFAAkF;AAClF,sBAAsB;AACtB,8DAA8D;AAC9D,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,wEAAwE;AACxE,gBAAgB;AAChB,kDAAkD;AAClD,wCAAwC;AACxC,0BAA0B;AAC1B,oDAAoD;AACpD,yCAAyC;AACzC,qBAAqB;AACrB,gCAAgC;AAChC,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AACV,mEAAmE;AACnE,gBAAgB;AAChB,kDAAkD;AAClD,wCAAwC;AACxC,0BAA0B;AAC1B,gDAAgD;AAChD,qBAAqB;AACrB,gCAAgC;AAEhC,+CAA+C;AAC/C,4BAA4B;AAC5B,mCAAmC;AACnC,oCAAoC;AACpC,YAAY;AACZ,UAAU;AAKV,MAAM;AACN,mCAAmC;AACnC,gCAAgC;AAChC,+BAA+B;AAC/B,+BAA+B;AAE/B,uCAAuC;AACvC,qEAAqE;AACrE,6BAA6B;AAC7B,mCAAmC;AACnC,sBAAsB;AACtB,gDAAgD;AAChD,qCAAqC;AACrC,iBAAiB;AACjB,4BAA4B;AAC5B,UAAU;AAEV,mEAAmE;AACnE,6BAA6B;AAC7B,mCAAmC;AACnC,sBAAsB;AACtB,2CAA2C;AAC3C,qCAAqC;AACrC,iBAAiB;AACjB,4BAA4B;AAC5B,UAAU;AAEV,qEAAqE;AACrE,6BAA6B;AAC7B,mCAAmC;AACnC,sBAAsB;AACtB,gDAAgD;AAChD,mCAAmC;AACnC,iBAAiB;AACjB,4BAA4B;AAC5B,UAAU;AAEV,iEAAiE;AACjE,6BAA6B;AAC7B,mCAAmC;AACnC,sBAAsB;AACtB,iDAAiD;AACjD,qCAAqC;AACrC,iBAAiB;AACjB,4BAA4B;AAC5B,UAAU;AACV,MAAM;AAEN,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC/B,MAAM,OAAO,GAAG,KAAK,CAAC;IACtB,EAAE,CAAC,iDAAiD,EAAE,GAAS,EAAE;QAC7D,MAAM,IAAI,GAAG,kBAAkB,CAAC;QAChC,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aAC9B,IAAI,CAAC,cAAc,CAAC;aACpB,IAAI,CAAC;YACF,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;QAEjB,gBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YAC7D,gBAAM,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,wBAAwB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAEpB,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;QAC3D,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,cAAc,CAAC;aACpB,IAAI,CAAC;YACF,KAAK,EAAE,qBAAqB;YAC5B,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAEpB,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;QACtD,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,cAAc,CAAC;aACpB,IAAI,CAAC;YACF,KAAK,EAAE,kBAAkB;SAC5B,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AACH,0DAAgC;AAChC,0DAA6B;AAC7B,oDAA4B;AAC5B,oDAA4B;AAE5B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC9B,yDAAyD;IACzD,uDAAuD;IACvD,iEAAiE;IACjE,wEAAwE;IACxE,gCAAgC;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC;IAEtB,EAAE,CAAC,4CAA4C,EAAE,GAAS,EAAE;QACxD,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,aAAa,CAAC;aACnB,IAAI,CAAC;YACF,KAAK,EAAE,qBAAqB;YAC5B,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;IAEjD,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;QACtD,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,aAAa,CAAC;aACnB,IAAI,CAAC;YACF,KAAK,EAAE,gBAAgB;YACvB,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;IAEjD,EAAE,CAAC,4CAA4C,EAAE,GAAS,EAAE;QACxD,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,aAAa,CAAC;aACnB,IAAI,CAAC;YACF,KAAK,EAAE,qBAAqB;YAC5B,QAAQ,EAAE,MAAM;SACnB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;IAEjD,EAAE,CAAC,wCAAwC,EAAE,GAAS,EAAE;QACpD,MAAM,IAAA,mBAAO,EAAC,kBAAG,CAAC;aACb,IAAI,CAAC,aAAa,CAAC;aACnB,IAAI,CAAC;YACF,KAAK,EAAE,sBAAsB;YAC7B,QAAQ,EAAE,QAAQ;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;AACrD,CAAC,CAAC,CAAC","sourcesContent":["// import request from 'supertest';\r\n// import app from './database';\r\n// import bcrypt from 'bcrypt';\r\n// import assert from 'assert';\r\n// import { expect } from 'chai';\r\n\r\n// describe('POST /user/login', () => {\r\n//     it('should login user', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/login')\r\n//                 .send({\r\n//                    password: \"123456\"\r\n//                 })\r\n//                 .expect(401);\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('should login user', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/login')\r\n//                 .send({\r\n//                    email: \"dalidapcm@gmail.com\",\r\n//                    password: \"123456\"\r\n//                 })\r\n//                 .expect(201);\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('user do not exist', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/login')\r\n//                 .send({\r\n//                    email: \"dalida@gil.com\",\r\n//                    password: \"123456\"\r\n//                 })\r\n//                 .expect(401);\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('password  do not exist', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/login')\r\n//                 .send({\r\n//                    email: \"dalidapcm@gmail.com\",\r\n//                    password: \"1236\"\r\n//                 })\r\n//                 .expect(401);\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('user is not admin', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/login')\r\n//                 .send({\r\n//                    email: \"irumvaleon@gmail.com\",\r\n//                    password: \"123456\"\r\n//                 })\r\n//                 .expect(201);\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n\r\n\r\n//  });\r\n\r\n// describe('POST /user/signup', () => {\r\n//     it('should create a new message', async () => {\r\n//         try {\r\n//             const mail = \"ddffbbvchjgfdxzdjkm@gmail.com\";\r\n//             const response = await request(app)\r\n//                 .post('/user/signup')\r\n//                 .send({\r\n//                    email: mail,\r\n//                    password: \"123456\"\r\n//                 })\r\n//                 .expect(201);\r\n//                 bcrypt.compare('123456', response.body.password, (err, result) => {\r\n//                     assert.strictEqual(result, true, 'Passwords should match');\r\n//                 });\r\n//             console.log('message created:', response.body);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('should return 409 if the email already exists', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/signup')\r\n//                 .send({\r\n//                     email: \"dalidapcm@gmail.com\",\r\n//                     password: \"123456\"\r\n//                 })\r\n//                 .expect(409);\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n//     it('should return 400 if password is missing', async () => {\r\n//         try {\r\n//             const response = await request(app)\r\n//                 .post('/user/signup')\r\n//                 .send({\r\n//                     email: \"test@example.com\"\r\n//                 })\r\n//                 .expect(500);\r\n\r\n//             // Add more assertions as needed\r\n//         } catch (error) {\r\n//             // Handle any errors\r\n//             console.error(error);\r\n//         }\r\n//     });\r\n    \r\n\r\n\r\n   \r\n// });\r\n// import request from 'supertest';\r\n// import app from './database';\r\n// import bcrypt from 'bcrypt';\r\n// import assert from 'assert';\r\n\r\n// describe('POST /user/login', () => {\r\n//     it('should login user with correct credentials', async () => {\r\n//         await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: \"dalidapcm@gmail.com\",\r\n//                 password: \"123456\"\r\n//             })\r\n//             .expect(201);\r\n//     });\r\n\r\n//     it('should return 401 if user does not exist', async () => {\r\n//         await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: \"dalida@gil.com\",\r\n//                 password: \"123456\"\r\n//             })\r\n//             .expect(401);\r\n//     });\r\n\r\n//     it('should return 401 if password is incorrect', async () => {\r\n//         await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: \"dalidapcm@gmail.com\",\r\n//                 password: \"1236\"\r\n//             })\r\n//             .expect(401);\r\n//     });\r\n\r\n//     it('should return 201 if user is not admin', async () => {\r\n//         await request(app)\r\n//             .post('/user/login')\r\n//             .send({\r\n//                 email: \"irumvaleon@gmail.com\",\r\n//                 password: \"123456\"\r\n//             })\r\n//             .expect(201);\r\n//     });\r\n// });\r\n\r\ndescribe('POST /user/signup', () => {\r\n    const timeout = 20000;\r\n    it('should create a new user with valid credentials', async () => {\r\n        const mail = \"ddffbm@gmail.com\";\r\n        const response = await request(app)\r\n            .post('/user/signup')\r\n            .send({\r\n                email: mail,\r\n                password: \"123456\"\r\n            })\r\n            .expect(201);\r\n        \r\n        bcrypt.compare('123456', response.body.password, (err, result) => {\r\n            assert.strictEqual(result, true, 'Passwords should match');\r\n        });\r\n    }).timeout(timeout);\r\n\r\n    it('should return 409 if the email already exists', async () => {\r\n        await request(app)\r\n            .post('/user/signup')\r\n            .send({\r\n                email: \"dalidapcm@gmail.com\",\r\n                password: \"123456\"\r\n            })\r\n            .expect(409);\r\n    }).timeout(timeout);\r\n\r\n    it('should return 500 if password is missing', async () => {\r\n        await request(app)\r\n            .post('/user/signup')\r\n            .send({\r\n                email: \"test@example.com\"\r\n            })\r\n            .expect(500);\r\n    }).timeout(timeout);\r\n});\r\nimport request from 'supertest';\r\nimport app from './database';\r\nimport bcrypt from 'bcrypt';\r\nimport assert from 'assert';\r\n\r\ndescribe('POST /user/login', () => {\r\n    // Increase timeout for all tests in this suite to 5000ms\r\n    // This ensures that tests have enough time to complete\r\n    // Adjust the timeout value as needed based on your test duration\r\n    // For example, you can try increasing it to 5000ms or more if necessary\r\n    // The default timeout is 2000ms\r\n    const timeout = 20000;\r\n\r\n    it('should login user with correct credentials', async () => {\r\n        await request(app)\r\n            .post('/user/login')\r\n            .send({\r\n                email: \"dalidapcm@gmail.com\",\r\n                password: \"123456\"\r\n            })\r\n            .expect(201);\r\n    }).timeout(timeout); // Set timeout for this test\r\n\r\n    it('should return 401 if user does not exist', async () => {\r\n        await request(app)\r\n            .post('/user/login')\r\n            .send({\r\n                email: \"dalida@gil.com\",\r\n                password: \"123456\"\r\n            })\r\n            .expect(401);\r\n    }).timeout(timeout); // Set timeout for this test\r\n\r\n    it('should return 401 if password is incorrect', async () => {\r\n        await request(app)\r\n            .post('/user/login')\r\n            .send({\r\n                email: \"dalidapcm@gmail.com\",\r\n                password: \"1236\"\r\n            })\r\n            .expect(401);\r\n    }).timeout(timeout); // Set timeout for this test\r\n\r\n    it('should return 201 if user is not admin', async () => {\r\n        await request(app)\r\n            .post('/user/login')\r\n            .send({\r\n                email: \"irumvaleon@gmail.com\",\r\n                password: \"123456\"\r\n            })\r\n            .expect(201);\r\n    }).timeout(timeout); // Set timeout for this test\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d2b710c8d3dc5ddb425af7959371c757293b52ce"}}